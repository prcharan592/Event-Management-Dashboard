{"ast":null,"code":"var _jsxFileName = \"/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/TaskTracker.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import '../styles/taskDashboard.css';\n\n// // export default function TaskTracker() {\n// //   const [tasks, setTasks] = useState([]);\n// //   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n// //   const [editingTaskId, setEditingTaskId] = useState(null);\n\n// //   const [events, setEvents] = useState([]);\n\n// //   // Fetch tasks from the backend\n// //   const fetchTasks = async () => {\n// //     try {\n// //       const response = await axios.get('http://localhost:5001/api/getTasks');\n// //       setTasks(response.data);\n// //     } catch (error) {\n// //       console.error('Error fetching tasks:', error);\n// //     }\n// //   };\n\n// //   // Fetch events from the backend\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/api/getEvents');\n// //         setEvents(response.data); // Assume the API returns an array of events\n// //       } catch (error) {\n// //         console.error('Error fetching events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   // Add a new task\n// //   const addTask = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n// //       await axios.post('http://localhost:5001/api/postTask', taskForm);\n// //       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n// //       fetchTasks(); // Refresh the tasks list\n// //       console.log('Task added successfully!');\n// //     } catch (error) {\n// //       console.error('Error adding task:', error.response?.data || error.message);\n// //     }\n// //   };\n\n// //   // Update an existing task's status\n// //   const updateTask = async (name) => {\n// //     try {\n// //       console.log('Updating Task:', name);\n// //       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n// //       setEditingTaskId(null);\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error updating task:', error);\n// //     }\n// //   };\n\n// //   // Delete a task\n// //   const deleteTask = async (name) => {\n// //     try {\n// //       console.log('Deleting Task:', name);\n// //       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //     }\n// //   };\n\n// //   // Handle form input changes\n// //   const handleInputChange = (e) => {\n// //     const { name, value, type, checked } = e.target;\n// //     setTaskForm({\n// //       ...taskForm,\n// //       [name]: type === 'checkbox' ? checked : value,\n// //     });\n// //   };\n\n// //   // Load tasks on component mount\n// //   useEffect(() => {\n// //     fetchTasks();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"dashboard-container\">\n// //       <h1>Task Management Dashboard</h1>\n\n// //       {/* Task Form */}\n// //       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"name\"\n// //           placeholder=\"Task Name\"\n// //           value={taskForm.name}\n// //           onChange={handleInputChange}\n// //           required\n// //         />\n// //         <input\n// //           type=\"date\"\n// //           name=\"deadline\"\n// //           value={taskForm.deadline}\n// //           onChange={handleInputChange}\n// //         />\n// //         <select\n// //           name=\"eventName\"\n// //           value={taskForm.eventName}\n// //           onChange={handleInputChange}\n// //           required\n// //         >\n// //           <option value=\"\" disabled>Select an event</option>\n// //           {events.map((event) => (\n// //             <option key={event._id} value={event.name}>\n// //               {event.name}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <button type=\"submit\">Add Task</button>\n// //       </form>\n\n// //       {/* Task Table */}\n// //       <div className=\"task-table\">\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Name</th>\n// //               <th>Deadline</th>\n// //               <th>Status</th>\n// //               <th>Event</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {tasks.map((task) => (\n// //               <tr key={task._id}>\n// //                 <td>{task.name}</td>\n// //                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n// //                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n// //                 <td>{task.event || 'Unlinked'}</td>\n// //                 <td>\n// //                   <button \n// //                     onClick={(e) => { \n// //                       e.preventDefault(); \n// //                       updateTask(task.name);\n// //                     }}\n// //                   >\n// //                     Update Status\n// //                   </button>\n// //                   <button onClick={() => deleteTask(task.name)}>Delete</button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../styles/Attendees.css\";\nimport { FaUserPlus, FaTrash } from \"react-icons/fa\"; // Import icons\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Attendees = () => {\n  _s();\n  const [attendees, setAttendees] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [newAttendee, setNewAttendee] = useState({\n    name: \"\",\n    eventName: \"\",\n    taskName: \"\"\n  });\n\n  // Fetch attendees from the server\n  const fetchAttendees = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5001/api/getAttendees\");\n      setAttendees(response.data);\n    } catch (error) {\n      console.error(\"Error fetching attendees:\", error);\n    }\n  };\n\n  // Fetch events from the server\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5001/api/getEvents\");\n      setEvents(response.data);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    }\n  };\n\n  // Fetch tasks from the server\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5001/api/getTasks\");\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n\n  // Add a new attendee\n  const addAttendee = async () => {\n    if (newAttendee.name === \"\" || newAttendee.eventName === \"\" || newAttendee.taskName === \"\") {\n      alert(\"All fields are required!\");\n      return;\n    }\n    try {\n      await axios.post(\"http://localhost:5001/api/postAttendee\", newAttendee);\n      fetchAttendees();\n      setNewAttendee({\n        name: \"\",\n        eventName: \"\",\n        taskName: \"\"\n      });\n    } catch (error) {\n      console.error(\"Error adding attendee:\", error);\n    }\n  };\n\n  // Delete an attendee\n  const deleteAttendee = async name => {\n    try {\n      await axios.delete(\"http://localhost:5001/api/deleteAttendee\", {\n        data: {\n          name: name\n        }\n      });\n      fetchAttendees();\n    } catch (error) {\n      console.error(\"Error deleting attendee:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchAttendees();\n    fetchEvents();\n    fetchTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Attendees Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-attendee\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Attendee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Attendee Name\",\n        value: newAttendee.name,\n        onChange: e => setNewAttendee({\n          ...newAttendee,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newAttendee.eventName,\n        onChange: e => setNewAttendee({\n          ...newAttendee,\n          eventName: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), events.map(event => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: event.name,\n          children: event.name\n        }, event._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newAttendee.taskName,\n        onChange: e => setNewAttendee({\n          ...newAttendee,\n          taskName: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: task.name,\n          children: task.name\n        }, task._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addAttendee,\n        children: [/*#__PURE__*/_jsxDEV(FaUserPlus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), \" Add Attendee\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attendee-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Attendees List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), attendees.map(attendee => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attendee-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: attendee.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: attendee.eventName || \"No Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: attendee.taskName || \"No Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-button\",\n          onClick: () => deleteAttendee(attendee.name),\n          children: [/*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 15\n          }, this), \" Delete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 13\n        }, this)]\n      }, attendee._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 5\n  }, this);\n};\n_s(Attendees, \"erx5UFf95LfmqotLqdL8a79ZjKQ=\");\n_c = Attendees;\nexport default Attendees;\nvar _c;\n$RefreshReg$(_c, \"Attendees\");","map":{"version":3,"names":["React","useState","useEffect","axios","FaUserPlus","FaTrash","jsxDEV","_jsxDEV","Attendees","_s","attendees","setAttendees","events","setEvents","tasks","setTasks","newAttendee","setNewAttendee","name","eventName","taskName","fetchAttendees","response","get","data","error","console","fetchEvents","fetchTasks","addAttendee","alert","post","deleteAttendee","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","event","_id","task","onClick","attendee","_c","$RefreshReg$"],"sources":["/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/TaskTracker.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import '../styles/taskDashboard.css';\n\n// // export default function TaskTracker() {\n// //   const [tasks, setTasks] = useState([]);\n// //   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n// //   const [editingTaskId, setEditingTaskId] = useState(null);\n\n// //   const [events, setEvents] = useState([]);\n\n// //   // Fetch tasks from the backend\n// //   const fetchTasks = async () => {\n// //     try {\n// //       const response = await axios.get('http://localhost:5001/api/getTasks');\n// //       setTasks(response.data);\n// //     } catch (error) {\n// //       console.error('Error fetching tasks:', error);\n// //     }\n// //   };\n\n// //   // Fetch events from the backend\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/api/getEvents');\n// //         setEvents(response.data); // Assume the API returns an array of events\n// //       } catch (error) {\n// //         console.error('Error fetching events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   // Add a new task\n// //   const addTask = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n// //       await axios.post('http://localhost:5001/api/postTask', taskForm);\n// //       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n// //       fetchTasks(); // Refresh the tasks list\n// //       console.log('Task added successfully!');\n// //     } catch (error) {\n// //       console.error('Error adding task:', error.response?.data || error.message);\n// //     }\n// //   };\n\n// //   // Update an existing task's status\n// //   const updateTask = async (name) => {\n// //     try {\n// //       console.log('Updating Task:', name);\n// //       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n// //       setEditingTaskId(null);\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error updating task:', error);\n// //     }\n// //   };\n\n// //   // Delete a task\n// //   const deleteTask = async (name) => {\n// //     try {\n// //       console.log('Deleting Task:', name);\n// //       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //     }\n// //   };\n\n// //   // Handle form input changes\n// //   const handleInputChange = (e) => {\n// //     const { name, value, type, checked } = e.target;\n// //     setTaskForm({\n// //       ...taskForm,\n// //       [name]: type === 'checkbox' ? checked : value,\n// //     });\n// //   };\n\n// //   // Load tasks on component mount\n// //   useEffect(() => {\n// //     fetchTasks();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"dashboard-container\">\n// //       <h1>Task Management Dashboard</h1>\n\n// //       {/* Task Form */}\n// //       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"name\"\n// //           placeholder=\"Task Name\"\n// //           value={taskForm.name}\n// //           onChange={handleInputChange}\n// //           required\n// //         />\n// //         <input\n// //           type=\"date\"\n// //           name=\"deadline\"\n// //           value={taskForm.deadline}\n// //           onChange={handleInputChange}\n// //         />\n// //         <select\n// //           name=\"eventName\"\n// //           value={taskForm.eventName}\n// //           onChange={handleInputChange}\n// //           required\n// //         >\n// //           <option value=\"\" disabled>Select an event</option>\n// //           {events.map((event) => (\n// //             <option key={event._id} value={event.name}>\n// //               {event.name}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <button type=\"submit\">Add Task</button>\n// //       </form>\n\n// //       {/* Task Table */}\n// //       <div className=\"task-table\">\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Name</th>\n// //               <th>Deadline</th>\n// //               <th>Status</th>\n// //               <th>Event</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {tasks.map((task) => (\n// //               <tr key={task._id}>\n// //                 <td>{task.name}</td>\n// //                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n// //                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n// //                 <td>{task.event || 'Unlinked'}</td>\n// //                 <td>\n// //                   <button \n// //                     onClick={(e) => { \n// //                       e.preventDefault(); \n// //                       updateTask(task.name);\n// //                     }}\n// //                   >\n// //                     Update Status\n// //                   </button>\n// //                   <button onClick={() => deleteTask(task.name)}>Delete</button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../styles/Attendees.css\";\nimport { FaUserPlus, FaTrash } from \"react-icons/fa\"; // Import icons\n\nconst Attendees = () => {\n  const [attendees, setAttendees] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [newAttendee, setNewAttendee] = useState({ name: \"\", eventName: \"\", taskName: \"\" });\n\n  // Fetch attendees from the server\n  const fetchAttendees = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5001/api/getAttendees\");\n      setAttendees(response.data);\n    } catch (error) {\n      console.error(\"Error fetching attendees:\", error);\n    }\n  };\n\n  // Fetch events from the server\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5001/api/getEvents\");\n      setEvents(response.data);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    }\n  };\n\n  // Fetch tasks from the server\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5001/api/getTasks\");\n      setTasks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n\n  // Add a new attendee\n  const addAttendee = async () => {\n    if (newAttendee.name === \"\" || newAttendee.eventName === \"\" || newAttendee.taskName === \"\") {\n      alert(\"All fields are required!\");\n      return;\n    }\n    try {\n      await axios.post(\"http://localhost:5001/api/postAttendee\", newAttendee);\n      fetchAttendees();\n      setNewAttendee({ name: \"\", eventName: \"\", taskName: \"\" });\n    } catch (error) {\n      console.error(\"Error adding attendee:\", error);\n    }\n  };\n\n  // Delete an attendee\n  const deleteAttendee = async (name) => {\n    try {\n      await axios.delete(\"http://localhost:5001/api/deleteAttendee\", {\n        data: { name: name },\n      });\n      fetchAttendees();\n    } catch (error) {\n      console.error(\"Error deleting attendee:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchAttendees();\n    fetchEvents();\n    fetchTasks();\n  }, []);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Attendees Dashboard</h1>\n\n      {/* Add Attendee Form */}\n      <div className=\"add-attendee\">\n        <h2>Add Attendee</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Attendee Name\"\n          value={newAttendee.name}\n          onChange={(e) => setNewAttendee({ ...newAttendee, name: e.target.value })}\n        />\n        <select\n          value={newAttendee.eventName}\n          onChange={(e) => setNewAttendee({ ...newAttendee, eventName: e.target.value })}\n        >\n          <option value=\"\">Select Event</option>\n          {events.map((event) => (\n            <option key={event._id} value={event.name}>\n              {event.name}\n            </option>\n          ))}\n        </select>\n        <select\n          value={newAttendee.taskName}\n          onChange={(e) => setNewAttendee({ ...newAttendee, taskName: e.target.value })}\n        >\n          <option value=\"\">Select Task</option>\n          {tasks.map((task) => (\n            <option key={task._id} value={task.name}>\n              {task.name}\n            </option>\n          ))}\n        </select>\n        <button onClick={addAttendee}>\n          <FaUserPlus /> Add Attendee\n        </button>\n      </div>\n\n      {/* Attendees List */}\n      <div className=\"attendee-list\">\n        <h2>Attendees List</h2>\n        {attendees.map((attendee) => (\n          <div key={attendee._id} className=\"attendee-item\">\n            <span>{attendee.name}</span>\n            <span>{attendee.eventName || \"No Event\"}</span>\n            <span>{attendee.taskName || \"No Task\"}</span>\n            <button className=\"delete-button\" onClick={() => deleteAttendee(attendee.name)}>\n              <FaTrash /> Delete\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Attendees;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}