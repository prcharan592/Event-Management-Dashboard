{"ast":null,"code":"var _jsxFileName = \"/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/TaskTracker.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { FaCheck, FaTrash, FaPlus } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskProgress = ({\n  tasks = []\n}) => {\n  _s();\n  const {\n    completedCount,\n    totalCount,\n    progressPercentage\n  } = React.useMemo(() => {\n    if (!Array.isArray(tasks)) return {\n      completedCount: 0,\n      totalCount: 0,\n      progressPercentage: 0\n    };\n    const completed = tasks.filter(task => task === null || task === void 0 ? void 0 : task.status).length;\n    const total = tasks.length;\n    const percentage = total === 0 ? 0 : Math.round(completed / total * 100);\n    return {\n      completedCount: completed,\n      totalCount: total,\n      progressPercentage: percentage\n    };\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-8 p-6 bg-white rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold text-gray-700\",\n        children: \"Task Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-sm font-medium text-indigo-600\",\n        children: [progressPercentage, \"% Complete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-4 bg-gray-200 rounded-full overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-full bg-gradient-to-r from-indigo-500 to-purple-600 transition-all duration-500 ease-in-out\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2 flex justify-between text-sm text-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [completedCount, \" Completed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [totalCount, \" Total Tasks\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProgress, \"7UZU+MnUTtS3OS7qQHQfflMgABg=\");\n_c = TaskProgress;\nexport default function TaskTracker() {\n  _s2();\n  const [tasks, setTasks] = useState([]);\n  const [taskForm, setTaskForm] = useState({\n    name: '',\n    deadline: '',\n    status: false,\n    eventName: ''\n  });\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [events, setEvents] = useState([]);\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getTasks');\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch events from the backend\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/api/getEvents');\n        setEvents(response.data);\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n    fetchEvents();\n  }, []);\n\n  // Add a new task\n  const addTask = async e => {\n    e.preventDefault();\n    try {\n      console.log('Task Form Data:', taskForm);\n      await axios.post('http://localhost:5001/api/postTask', taskForm);\n      setTaskForm({\n        name: '',\n        deadline: '',\n        status: false,\n        eventName: ''\n      });\n      fetchTasks();\n      console.log('Task added successfully!');\n    } catch (error) {\n      var _error$response;\n      console.error('Error adding task:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n\n  // Update an existing task's status\n  const updateTask = async name => {\n    try {\n      console.log('Updating Task:', name);\n      await axios.put('http://localhost:5001/api/changeTaskStatus', {\n        name\n      });\n      setEditingTaskId(null);\n      fetchTasks();\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async name => {\n    try {\n      console.log('Deleting Task:', name);\n      await axios.delete('http://localhost:5001/api/deleteTask', {\n        data: {\n          name\n        }\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  // Handle form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setTaskForm({\n      ...taskForm,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  // Load tasks on component mount\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskProgress, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"task-form\",\n      onSubmit: editingTaskId ? updateTask : addTask,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Task Name\",\n        value: taskForm.name,\n        onChange: handleInputChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"deadline\",\n        value: taskForm.deadline,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"eventName\",\n        value: taskForm.eventName,\n        onChange: handleInputChange,\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select an event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), events.map(event => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: event.name,\n          children: event.name\n        }, event._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: [/*#__PURE__*/_jsxDEV(FaPlus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), \" Add Task\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-table\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Deadline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.status ? 'Completed' : 'Pending'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.event || 'Unlinked'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"update-button\",\n                onClick: e => {\n                  e.preventDefault();\n                  updateTask(task.name);\n                },\n                children: [/*#__PURE__*/_jsxDEV(FaCheck, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 21\n                }, this), \" Update Status\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: () => deleteTask(task.name),\n                children: [/*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 21\n                }, this), \" Delete\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, this)]\n          }, task._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n}\n_s2(TaskTracker, \"vPO9lasuj7tjBo3exn2igleGtV8=\");\n_c2 = TaskTracker;\nvar _c, _c2;\n$RefreshReg$(_c, \"TaskProgress\");\n$RefreshReg$(_c2, \"TaskTracker\");","map":{"version":3,"names":["React","useEffect","useState","axios","FaCheck","FaTrash","FaPlus","jsxDEV","_jsxDEV","TaskProgress","tasks","_s","completedCount","totalCount","progressPercentage","useMemo","Array","isArray","completed","filter","task","status","length","total","percentage","Math","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","_c","TaskTracker","_s2","setTasks","taskForm","setTaskForm","name","deadline","eventName","editingTaskId","setEditingTaskId","events","setEvents","fetchTasks","response","get","data","error","console","fetchEvents","addTask","e","preventDefault","log","post","_error$response","message","updateTask","put","deleteTask","delete","handleInputChange","value","type","checked","target","onSubmit","placeholder","onChange","required","disabled","map","event","_id","Date","toLocaleDateString","onClick","_c2","$RefreshReg$"],"sources":["/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/TaskTracker.jsx"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { FaCheck, FaTrash, FaPlus } from 'react-icons/fa';\n\nconst TaskProgress = ({ tasks = [] }) => {\n  const { completedCount, totalCount, progressPercentage } = React.useMemo(() => {\n    if (!Array.isArray(tasks)) return { completedCount: 0, totalCount: 0, progressPercentage: 0 };\n    \n    const completed = tasks.filter(task => task?.status).length;\n    const total = tasks.length;\n    const percentage = total === 0 ? 0 : Math.round((completed / total) * 100);\n    \n    return {\n      completedCount: completed,\n      totalCount: total,\n      progressPercentage: percentage\n    };\n  }, [tasks]);\n\n  return (\n    <div className=\"mb-8 p-6 bg-white rounded-lg shadow-md\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <h2 className=\"text-lg font-semibold text-gray-700\">Task Progress</h2>\n        <span className=\"text-sm font-medium text-indigo-600\">\n          {progressPercentage}% Complete\n        </span>\n      </div>\n      <div className=\"w-full h-4 bg-gray-200 rounded-full overflow-hidden\">\n        <div \n          className=\"h-full bg-gradient-to-r from-indigo-500 to-purple-600 transition-all duration-500 ease-in-out\"\n          style={{ width: `${progressPercentage}%` }}\n        />\n      </div>\n      <div className=\"mt-2 flex justify-between text-sm text-gray-500\">\n        <span>{completedCount} Completed</span>\n        <span>{totalCount} Total Tasks</span>\n      </div>\n    </div>\n  );\n};\n\nexport default function TaskTracker() {\n  const [tasks, setTasks] = useState([]);\n  const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [events, setEvents] = useState([]);\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getTasks');\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch events from the backend\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/api/getEvents');\n        setEvents(response.data);\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n\n    fetchEvents();\n  }, []);\n\n  // Add a new task\n  const addTask = async (e) => {\n    e.preventDefault();\n    try {\n      console.log('Task Form Data:', taskForm);\n      await axios.post('http://localhost:5001/api/postTask', taskForm);\n      setTaskForm({ name: '', deadline: '', status: false, eventName: '' });\n      fetchTasks();\n      console.log('Task added successfully!');\n    } catch (error) {\n      console.error('Error adding task:', error.response?.data || error.message);\n    }\n  };\n\n  // Update an existing task's status\n  const updateTask = async (name) => {\n    try {\n      console.log('Updating Task:', name);\n      await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n      setEditingTaskId(null);\n      fetchTasks();\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async (name) => {\n    try {\n      console.log('Deleting Task:', name);\n      await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n      fetchTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  // Handle form input changes\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setTaskForm({\n      ...taskForm,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n\n  // Load tasks on component mount\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  return (\n    <div className=\"dashboard-container\">\n      <h1>Task Management Dashboard</h1>\n      \n      {/* Task Progress Component */}\n      <TaskProgress tasks={tasks} />\n\n      {/* Task Form */}\n      <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Task Name\"\n          value={taskForm.name}\n          onChange={handleInputChange}\n          required\n        />\n        <input\n          type=\"date\"\n          name=\"deadline\"\n          value={taskForm.deadline}\n          onChange={handleInputChange}\n        />\n        <select\n          name=\"eventName\"\n          value={taskForm.eventName}\n          onChange={handleInputChange}\n          required\n        >\n          <option value=\"\" disabled>Select an event</option>\n          {events.map((event) => (\n            <option key={event._id} value={event.name}>\n              {event.name}\n            </option>\n          ))}\n        </select>\n        <button type=\"submit\">\n          <FaPlus /> Add Task\n        </button>\n      </form>\n\n      {/* Task Table */}\n      <div className=\"task-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Deadline</th>\n              <th>Status</th>\n              <th>Event</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tasks.map((task) => (\n              <tr key={task._id}>\n                <td>{task.name}</td>\n                <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n                <td>{task.status ? 'Completed' : 'Pending'}</td>\n                <td>{task.event || 'Unlinked'}</td>\n                <td>\n                  <button\n                    className=\"update-button\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      updateTask(task.name);\n                    }}\n                  >\n                    <FaCheck /> Update Status\n                  </button>\n                  <button\n                    className=\"delete-button\"\n                    onClick={() => deleteTask(task.name)}\n                  >\n                    <FaTrash /> Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}