{"ast":null,"code":"var _jsxFileName = \"/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/Event.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../styles/Event.css';\n\n// export default function Event() {\n//   const [events, setEvents] = useState([]);\n//   const [tasks, setTasks] = useState({});\n//   const [editingEventName, setEditingEventName] = useState(null);\n//   const [editField, setEditField] = useState('');\n//   const [editValue, setEditValue] = useState('');\n//   const [newEvent, setNewEvent] = useState({\n//     name: '',\n//     date: '',\n//     location: '',\n//     description: '',\n//   });\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getEvents');\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching events:', error);\n//     }\n//   };\n\n//   const fetchTasksForEvent = async (eventName) => {\n//     try {\n//       console.log(eventName);\n//       const response = await axios.get('http://localhost:5001/api/getEventTasks',{params: {\n//         name: eventName\n//       }});\n//       setTasks((prevTasks) => ({\n//         ...prevTasks,\n//         [eventName]: response.data,\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching tasks for event:', error);\n//     }\n//   };\n\n//   const toggleTasks = (eventName) => {\n//     if (tasks[eventName]) {\n//       setTasks((prevTasks) => {\n//         const updatedTasks = { ...prevTasks };\n//         delete updatedTasks[eventName];\n//         return updatedTasks;\n//       });\n//     }\n\n//     else\n//       fetchTasksForEvent(eventName);\n\n//   };\n\n//   const deleteTask = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteTask', {\n//         data: { name:eventName},\n//       });\n//       fetchTasksForEvent(eventName);\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const deleteEvent = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteEvent', {\n//         data: { name: eventName },\n//       });\n//       fetchEvents();\n//     } catch (error) {\n//       console.error('Error deleting event:', error);\n//     }\n//   };\n\n//   const updateEvent = async () => {\n//     let endpoint = '';\n//     switch (editField) {\n//       case 'date':\n//         endpoint = 'http://localhost:5001/api/updateEventDate';\n//         break;\n//       case 'description':\n//         endpoint = 'http://localhost:5001/api/updateEventDescription';\n//         break;\n//       case 'location':\n//         endpoint = 'http://localhost:5001/api/updateEventLocation';\n//         break;\n//       default:\n//         console.error('Invalid edit field');\n//         return;\n//     }\n//     try {\n//       await axios.put(endpoint, { name: editingEventName, [editField]: editValue });\n//       fetchEvents();\n//       cancelEditing();\n//     } catch (error) {\n//       console.error(`Error updating event ${editField}:`, error);\n//     }\n//   };\n\n//   const addEvent = async () => {\n//     try {\n//       if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n//         alert('All fields are required!');\n//         return;\n//       }\n//       await axios.post('http://localhost:5001/api/postEvent', newEvent);\n//       fetchEvents();\n//       setNewEvent({ name: '', date: '', location: '', description: '' });\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   const startEditing = (eventName, field, currentValue) => {\n//     setEditingEventName(eventName);\n//     setEditField(field);\n//     setEditValue(currentValue);\n//   };\n\n//   const cancelEditing = () => {\n//     setEditingEventName(null);\n//     setEditField('');\n//     setEditValue('');\n//   };\n\n//   return (\n//     <div className=\"event-page\">\n//       <h1>Event Management</h1>\n\n//       <div className=\"add-event-form\">\n//         <h2>Add New Event</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Name\"\n//           value={newEvent.name}\n//           onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={newEvent.date}\n//           onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={newEvent.location}\n//           onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={newEvent.description}\n//           onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n//         ></textarea>\n//         <button onClick={addEvent}>Add Event</button>\n//       </div>\n\n//       <div className=\"event-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Date</th>\n//               <th>Location</th>\n//               <th>Description</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {events.map((event) => (\n\n//               <React.Fragment key={event._id}>\n//                 <tr>\n//                   <td>{event.name}</td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'date' ? (\n//                       <input\n//                         type=\"date\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {new Date(event.date).toLocaleDateString()}\n//                         <button onClick={() => startEditing(event.name, 'date', event.date)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'location' ? (\n//                       <input\n//                         type=\"text\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {event.location}\n//                         <button onClick={() => startEditing(event.name, 'location', event.location)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'description' ? (\n//                       <textarea value={editValue} onChange={(e) => setEditValue(e.target.value)} />\n//                     ) : (\n//                       <>\n//                         {event.description}\n//                         <button\n//                           onClick={() => startEditing(event.name, 'description', event.description)}\n//                         >\n//                           Edit\n//                         </button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name ? (\n//                       <>\n//                         <button onClick={updateEvent}>Save</button>\n//                         <button onClick={cancelEditing}>Cancel</button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => toggleTasks(event.name)}>\n//                           {tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'}\n//                         </button>\n//                         <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//                 {tasks[event.name] && (\n//                   <tr>\n//                     <td colSpan=\"5\">\n//                       <table className=\"task-table\">\n//                         <thead>\n//                           <tr>\n//                             <th>Task Name</th>\n//                             <th>Deadline</th>\n//                             <th>Status</th>\n//                             <th>Actions</th>\n\n//                           </tr>\n//                         </thead>\n//                         <tbody>\n//                           {tasks[event.name].map((task) => (\n//                             <tr key={task._id}>\n//                               <td>{task.name}</td>\n//                               <td>{new Date(task.deadline).toLocaleDateString()}</td>\n//                               <td>{task.status?' Completed ':' Pending '}</td>\n//                               <td>\n//                                 <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n//                               </td>\n//                             </tr>\n//                           ))}\n//                         </tbody>\n//                       </table>\n//                     </td>\n//                   </tr>\n//                 )}\n//               </React.Fragment>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/Event.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Event() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState({});\n  const [editingEventName, setEditingEventName] = useState(null);\n  const [editField, setEditField] = useState('');\n  const [editValue, setEditValue] = useState('');\n  const [newEvent, setNewEvent] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: ''\n  });\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEvents');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n  const fetchTasksForEvent = async eventName => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEventTasks', {\n        params: {\n          name: eventName\n        }\n      });\n      setTasks(prevTasks => ({\n        ...prevTasks,\n        [eventName]: response.data\n      }));\n    } catch (error) {\n      console.error('Error fetching tasks for event:', error);\n    }\n  };\n  const toggleTasks = eventName => {\n    if (tasks[eventName]) {\n      setTasks(prevTasks => {\n        const updatedTasks = {\n          ...prevTasks\n        };\n        delete updatedTasks[eventName];\n        return updatedTasks;\n      });\n    } else {\n      fetchTasksForEvent(eventName);\n    }\n  };\n  const deleteTask = async taskName => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteTask', {\n        data: {\n          name: taskName\n        }\n      });\n      fetchTasksForEvent(taskName);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const deleteEvent = async eventName => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteEvent', {\n        data: {\n          name: eventName\n        }\n      });\n      fetchEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n  const updateEvent = async () => {\n    try {\n      let endpoint = '';\n      let payload = {};\n\n      // Determine the endpoint and payload based on the field being edited\n      switch (editField) {\n        case 'date':\n          endpoint = 'http://localhost:5001/api/updateEventDate';\n          payload = {\n            name: editingEventName,\n            date: editValue\n          };\n          break;\n        case 'description':\n          endpoint = 'http://localhost:5001/api/updateEventDescription';\n          payload = {\n            name: editingEventName,\n            description: editValue\n          };\n          break;\n        case 'location':\n          endpoint = 'http://localhost:5001/api/updateEventLocation';\n          payload = {\n            name: editingEventName,\n            location: editValue\n          };\n          break;\n        default:\n          console.error('Invalid edit field');\n          return;\n      }\n      console.log('Updating event:', editingEventName);\n      console.log('Field to update:', editField);\n      console.log('New value:', editValue);\n      console.log('Endpoint:', endpoint);\n      console.log('Payload:', payload);\n\n      // Send the update request to the backend\n      const response = await axios.put(endpoint, payload);\n      console.log('Update response:', response.data);\n\n      // Refresh the event list and cancel editing mode\n      fetchEvents();\n      cancelEditing();\n    } catch (error) {\n      console.error('Error updating event:', error);\n    }\n  };\n  const addEvent = async () => {\n    try {\n      if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n        alert('All fields are required!');\n        return;\n      }\n      await axios.post('http://localhost:5001/api/postEvent', newEvent);\n      fetchEvents();\n      setNewEvent({\n        name: '',\n        date: '',\n        location: '',\n        description: ''\n      });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n  const startEditing = (eventName, field, currentValue) => {\n    setEditingEventName(eventName);\n    setEditField(field);\n    setEditValue(currentValue);\n  };\n  const cancelEditing = () => {\n    setEditingEventName(null);\n    setEditField('');\n    setEditValue('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Event Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-event-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Event Name\",\n        value: newEvent.name,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newEvent.date,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          date: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Location\",\n        value: newEvent.location,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          location: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Description\",\n        value: newEvent.description,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addEvent,\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-table\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: events.map(event => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: event.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventName === event.name && editField === 'date' ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  value: editValue,\n                  onChange: e => setEditValue(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [new Date(event.date).toLocaleDateString(), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => startEditing(event.name, 'date', event.date),\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 482,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventName === event.name && editField === 'location' ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: editValue,\n                  onChange: e => setEditValue(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [event.location, /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => startEditing(event.name, 'location', event.location),\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 496,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 486,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventName === event.name && editField === 'description' ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  value: editValue,\n                  onChange: e => setEditValue(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 502,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [event.description, /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => startEditing(event.name, 'description', event.description),\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 506,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 500,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventName === event.name ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: updateEvent,\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 517,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: cancelEditing,\n                    children: \"Cancel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 518,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => toggleTasks(event.name),\n                    children: tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => deleteEvent(event.name),\n                    children: \"Delete Event\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 525,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this), tasks[event.name] && /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"5\",\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"task-table\",\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Task Name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 536,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Deadline\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 537,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Status\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 538,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Actions\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 539,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 535,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 534,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: tasks[event.name].map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 545,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: new Date(task.deadline).toLocaleDateString()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 546,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.status ? 'Completed' : 'Pending'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 547,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"button\", {\n                          onClick: () => deleteTask(task.name),\n                          children: \"Delete Task\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 549,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 548,\n                        columnNumber: 31\n                      }, this)]\n                    }, task._id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 544,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 542,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 533,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 19\n            }, this)]\n          }, event._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 5\n  }, this);\n}\n_s(Event, \"pQMgbelaHmB/MdUnJUX+vWe+cug=\");\n_c = Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Event","_s","events","setEvents","tasks","setTasks","editingEventName","setEditingEventName","editField","setEditField","editValue","setEditValue","newEvent","setNewEvent","name","date","location","description","fetchEvents","response","get","data","error","console","fetchTasksForEvent","eventName","params","prevTasks","toggleTasks","updatedTasks","deleteTask","taskName","delete","deleteEvent","updateEvent","endpoint","payload","log","put","cancelEditing","addEvent","alert","post","startEditing","field","currentValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","event","Date","toLocaleDateString","colSpan","task","deadline","status","_id","_c","$RefreshReg$"],"sources":["/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/Event.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../styles/Event.css';\n\n// export default function Event() {\n//   const [events, setEvents] = useState([]);\n//   const [tasks, setTasks] = useState({});\n//   const [editingEventName, setEditingEventName] = useState(null);\n//   const [editField, setEditField] = useState('');\n//   const [editValue, setEditValue] = useState('');\n//   const [newEvent, setNewEvent] = useState({\n//     name: '',\n//     date: '',\n//     location: '',\n//     description: '',\n//   });\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getEvents');\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching events:', error);\n//     }\n//   };\n\n//   const fetchTasksForEvent = async (eventName) => {\n//     try {\n//       console.log(eventName);\n//       const response = await axios.get('http://localhost:5001/api/getEventTasks',{params: {\n//         name: eventName\n//       }});\n//       setTasks((prevTasks) => ({\n//         ...prevTasks,\n//         [eventName]: response.data,\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching tasks for event:', error);\n//     }\n//   };\n\n//   const toggleTasks = (eventName) => {\n//     if (tasks[eventName]) {\n//       setTasks((prevTasks) => {\n//         const updatedTasks = { ...prevTasks };\n//         delete updatedTasks[eventName];\n//         return updatedTasks;\n//       });\n//     }\n\n//     else\n//       fetchTasksForEvent(eventName);\n    \n//   };\n\n//   const deleteTask = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteTask', {\n//         data: { name:eventName},\n//       });\n//       fetchTasksForEvent(eventName);\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const deleteEvent = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteEvent', {\n//         data: { name: eventName },\n//       });\n//       fetchEvents();\n//     } catch (error) {\n//       console.error('Error deleting event:', error);\n//     }\n//   };\n\n//   const updateEvent = async () => {\n//     let endpoint = '';\n//     switch (editField) {\n//       case 'date':\n//         endpoint = 'http://localhost:5001/api/updateEventDate';\n//         break;\n//       case 'description':\n//         endpoint = 'http://localhost:5001/api/updateEventDescription';\n//         break;\n//       case 'location':\n//         endpoint = 'http://localhost:5001/api/updateEventLocation';\n//         break;\n//       default:\n//         console.error('Invalid edit field');\n//         return;\n//     }\n//     try {\n//       await axios.put(endpoint, { name: editingEventName, [editField]: editValue });\n//       fetchEvents();\n//       cancelEditing();\n//     } catch (error) {\n//       console.error(`Error updating event ${editField}:`, error);\n//     }\n//   };\n\n//   const addEvent = async () => {\n//     try {\n//       if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n//         alert('All fields are required!');\n//         return;\n//       }\n//       await axios.post('http://localhost:5001/api/postEvent', newEvent);\n//       fetchEvents();\n//       setNewEvent({ name: '', date: '', location: '', description: '' });\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   const startEditing = (eventName, field, currentValue) => {\n//     setEditingEventName(eventName);\n//     setEditField(field);\n//     setEditValue(currentValue);\n//   };\n\n//   const cancelEditing = () => {\n//     setEditingEventName(null);\n//     setEditField('');\n//     setEditValue('');\n//   };\n\n//   return (\n//     <div className=\"event-page\">\n//       <h1>Event Management</h1>\n\n//       <div className=\"add-event-form\">\n//         <h2>Add New Event</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Name\"\n//           value={newEvent.name}\n//           onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={newEvent.date}\n//           onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={newEvent.location}\n//           onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={newEvent.description}\n//           onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n//         ></textarea>\n//         <button onClick={addEvent}>Add Event</button>\n//       </div>\n\n//       <div className=\"event-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Date</th>\n//               <th>Location</th>\n//               <th>Description</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {events.map((event) => (\n              \n//               <React.Fragment key={event._id}>\n//                 <tr>\n//                   <td>{event.name}</td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'date' ? (\n//                       <input\n//                         type=\"date\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {new Date(event.date).toLocaleDateString()}\n//                         <button onClick={() => startEditing(event.name, 'date', event.date)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'location' ? (\n//                       <input\n//                         type=\"text\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {event.location}\n//                         <button onClick={() => startEditing(event.name, 'location', event.location)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'description' ? (\n//                       <textarea value={editValue} onChange={(e) => setEditValue(e.target.value)} />\n//                     ) : (\n//                       <>\n//                         {event.description}\n//                         <button\n//                           onClick={() => startEditing(event.name, 'description', event.description)}\n//                         >\n//                           Edit\n//                         </button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name ? (\n//                       <>\n//                         <button onClick={updateEvent}>Save</button>\n//                         <button onClick={cancelEditing}>Cancel</button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => toggleTasks(event.name)}>\n//                           {tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'}\n//                         </button>\n//                         <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//                 {tasks[event.name] && (\n//                   <tr>\n//                     <td colSpan=\"5\">\n//                       <table className=\"task-table\">\n//                         <thead>\n//                           <tr>\n//                             <th>Task Name</th>\n//                             <th>Deadline</th>\n//                             <th>Status</th>\n//                             <th>Actions</th>\n                            \n//                           </tr>\n//                         </thead>\n//                         <tbody>\n//                           {tasks[event.name].map((task) => (\n//                             <tr key={task._id}>\n//                               <td>{task.name}</td>\n//                               <td>{new Date(task.deadline).toLocaleDateString()}</td>\n//                               <td>{task.status?' Completed ':' Pending '}</td>\n//                               <td>\n//                                 <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n//                               </td>\n//                             </tr>\n//                           ))}\n//                         </tbody>\n//                       </table>\n//                     </td>\n//                   </tr>\n//                 )}\n//               </React.Fragment>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/Event.css';\n\nexport default function Event() {\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState({});\n  const [editingEventName, setEditingEventName] = useState(null);\n  const [editField, setEditField] = useState('');\n  const [editValue, setEditValue] = useState('');\n  const [newEvent, setNewEvent] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: '',\n  });\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEvents');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n\n  const fetchTasksForEvent = async (eventName) => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEventTasks', {\n        params: { name: eventName },\n      });\n      setTasks((prevTasks) => ({\n        ...prevTasks,\n        [eventName]: response.data,\n      }));\n    } catch (error) {\n      console.error('Error fetching tasks for event:', error);\n    }\n  };\n\n  const toggleTasks = (eventName) => {\n    if (tasks[eventName]) {\n      setTasks((prevTasks) => {\n        const updatedTasks = { ...prevTasks };\n        delete updatedTasks[eventName];\n        return updatedTasks;\n      });\n    } else {\n      fetchTasksForEvent(eventName);\n    }\n  };\n\n  const deleteTask = async (taskName) => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteTask', {\n        data: { name: taskName },\n      });\n      fetchTasksForEvent(taskName);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const deleteEvent = async (eventName) => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteEvent', {\n        data: { name: eventName },\n      });\n      fetchEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n\n  const updateEvent = async () => {\n    try {\n      let endpoint = '';\n      let payload = {};\n\n      // Determine the endpoint and payload based on the field being edited\n      switch (editField) {\n        case 'date':\n          endpoint = 'http://localhost:5001/api/updateEventDate';\n          payload = { name: editingEventName, date: editValue };\n          break;\n        case 'description':\n          endpoint = 'http://localhost:5001/api/updateEventDescription';\n          payload = { name: editingEventName, description: editValue };\n          break;\n        case 'location':\n          endpoint = 'http://localhost:5001/api/updateEventLocation';\n          payload = { name: editingEventName, location: editValue };\n          break;\n        default:\n          console.error('Invalid edit field');\n          return;\n      }\n\n      console.log('Updating event:', editingEventName);\n      console.log('Field to update:', editField);\n      console.log('New value:', editValue);\n      console.log('Endpoint:', endpoint);\n      console.log('Payload:', payload);\n\n      // Send the update request to the backend\n      const response = await axios.put(endpoint, payload);\n\n      console.log('Update response:', response.data);\n\n      // Refresh the event list and cancel editing mode\n      fetchEvents();\n      cancelEditing();\n    } catch (error) {\n      console.error('Error updating event:', error);\n    }\n  };\n\n  const addEvent = async () => {\n    try {\n      if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n        alert('All fields are required!');\n        return;\n      }\n      await axios.post('http://localhost:5001/api/postEvent', newEvent);\n      fetchEvents();\n      setNewEvent({ name: '', date: '', location: '', description: '' });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  const startEditing = (eventName, field, currentValue) => {\n    setEditingEventName(eventName);\n    setEditField(field);\n    setEditValue(currentValue);\n  };\n\n  const cancelEditing = () => {\n    setEditingEventName(null);\n    setEditField('');\n    setEditValue('');\n  };\n\n  return (\n    <div className=\"event-page\">\n      <h1>Event Management</h1>\n\n      <div className=\"add-event-form\">\n        <h2>Add New Event</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Event Name\"\n          value={newEvent.name}\n          onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n        />\n        <input\n          type=\"date\"\n          value={newEvent.date}\n          onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Location\"\n          value={newEvent.location}\n          onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n        />\n        <textarea\n          placeholder=\"Description\"\n          value={newEvent.description}\n          onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n        ></textarea>\n        <button onClick={addEvent}>Add Event</button>\n      </div>\n\n      <div className=\"event-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Date</th>\n              <th>Location</th>\n              <th>Description</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {events.map((event) => (\n              <React.Fragment key={event._id}>\n                <tr>\n                  <td>{event.name}</td>\n                  <td>\n                    {editingEventName === event.name && editField === 'date' ? (\n                      <input\n                        type=\"date\"\n                        value={editValue}\n                        onChange={(e) => setEditValue(e.target.value)}\n                      />\n                    ) : (\n                      <>\n                        {new Date(event.date).toLocaleDateString()}\n                        <button onClick={() => startEditing(event.name, 'date', event.date)}>Edit</button>\n                      </>\n                    )}\n                  </td>\n                  <td>\n                    {editingEventName === event.name && editField === 'location' ? (\n                      <input\n                        type=\"text\"\n                        value={editValue}\n                        onChange={(e) => setEditValue(e.target.value)}\n                      />\n                    ) : (\n                      <>\n                        {event.location}\n                        <button onClick={() => startEditing(event.name, 'location', event.location)}>Edit</button>\n                      </>\n                    )}\n                  </td>\n                  <td>\n                    {editingEventName === event.name && editField === 'description' ? (\n                      <textarea value={editValue} onChange={(e) => setEditValue(e.target.value)} />\n                    ) : (\n                      <>\n                        {event.description}\n                        <button\n                          onClick={() => startEditing(event.name, 'description', event.description)}\n                        >\n                          Edit\n                        </button>\n                      </>\n                    )}\n                  </td>\n                  <td>\n                    {editingEventName === event.name ? (\n                      <>\n                        <button onClick={updateEvent}>Save</button>\n                        <button onClick={cancelEditing}>Cancel</button>\n                      </>\n                    ) : (\n                      <>\n                        <button onClick={() => toggleTasks(event.name)}>\n                          {tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'}\n                        </button>\n                        <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n                      </>\n                    )}\n                  </td>\n                </tr>\n                {tasks[event.name] && (\n                  <tr>\n                    <td colSpan=\"5\">\n                      <table className=\"task-table\">\n                        <thead>\n                          <tr>\n                            <th>Task Name</th>\n                            <th>Deadline</th>\n                            <th>Status</th>\n                            <th>Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tasks[event.name].map((task) => (\n                            <tr key={task._id}>\n                              <td>{task.name}</td>\n                              <td>{new Date(task.deadline).toLocaleDateString()}</td>\n                              <td>{task.status ? 'Completed' : 'Pending'}</td>\n                              <td>\n                                <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </td>\n                  </tr>\n                )}\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}