{"ast":null,"code":"var _jsxFileName = \"/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/Event.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../styles/Event.css';\n\n// export default function Event() {\n//   const [events, setEvents] = useState([]);\n//   const [tasks, setTasks] = useState({});\n//   const [editingEventName, setEditingEventName] = useState(null);\n//   const [editField, setEditField] = useState('');\n//   const [editValue, setEditValue] = useState('');\n//   const [newEvent, setNewEvent] = useState({\n//     name: '',\n//     date: '',\n//     location: '',\n//     description: '',\n//   });\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getEvents');\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching events:', error);\n//     }\n//   };\n\n//   const fetchTasksForEvent = async (eventName) => {\n//     try {\n//       console.log(eventName);\n//       const response = await axios.get('http://localhost:5001/api/getEventTasks',{params: {\n//         name: eventName\n//       }});\n//       setTasks((prevTasks) => ({\n//         ...prevTasks,\n//         [eventName]: response.data,\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching tasks for event:', error);\n//     }\n//   };\n\n//   const toggleTasks = (eventName) => {\n//     if (tasks[eventName]) {\n//       setTasks((prevTasks) => {\n//         const updatedTasks = { ...prevTasks };\n//         delete updatedTasks[eventName];\n//         return updatedTasks;\n//       });\n//     }\n\n//     else\n//       fetchTasksForEvent(eventName);\n\n//   };\n\n//   const deleteTask = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteTask', {\n//         data: { name:eventName},\n//       });\n//       fetchTasksForEvent(eventName);\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const deleteEvent = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteEvent', {\n//         data: { name: eventName },\n//       });\n//       fetchEvents();\n//     } catch (error) {\n//       console.error('Error deleting event:', error);\n//     }\n//   };\n\n//   const updateEvent = async () => {\n//     let endpoint = '';\n//     switch (editField) {\n//       case 'date':\n//         endpoint = 'http://localhost:5001/api/updateEventDate';\n//         break;\n//       case 'description':\n//         endpoint = 'http://localhost:5001/api/updateEventDescription';\n//         break;\n//       case 'location':\n//         endpoint = 'http://localhost:5001/api/updateEventLocation';\n//         break;\n//       default:\n//         console.error('Invalid edit field');\n//         return;\n//     }\n//     try {\n//       await axios.put(endpoint, { name: editingEventName, [editField]: editValue });\n//       fetchEvents();\n//       cancelEditing();\n//     } catch (error) {\n//       console.error(`Error updating event ${editField}:`, error);\n//     }\n//   };\n\n//   const addEvent = async () => {\n//     try {\n//       if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n//         alert('All fields are required!');\n//         return;\n//       }\n//       await axios.post('http://localhost:5001/api/postEvent', newEvent);\n//       fetchEvents();\n//       setNewEvent({ name: '', date: '', location: '', description: '' });\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   const startEditing = (eventName, field, currentValue) => {\n//     setEditingEventName(eventName);\n//     setEditField(field);\n//     setEditValue(currentValue);\n//   };\n\n//   const cancelEditing = () => {\n//     setEditingEventName(null);\n//     setEditField('');\n//     setEditValue('');\n//   };\n\n//   return (\n//     <div className=\"event-page\">\n//       <h1>Event Management</h1>\n\n//       <div className=\"add-event-form\">\n//         <h2>Add New Event</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Name\"\n//           value={newEvent.name}\n//           onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={newEvent.date}\n//           onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={newEvent.location}\n//           onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={newEvent.description}\n//           onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n//         ></textarea>\n//         <button onClick={addEvent}>Add Event</button>\n//       </div>\n\n//       <div className=\"event-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Date</th>\n//               <th>Location</th>\n//               <th>Description</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {events.map((event) => (\n\n//               <React.Fragment key={event._id}>\n//                 <tr>\n//                   <td>{event.name}</td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'date' ? (\n//                       <input\n//                         type=\"date\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {new Date(event.date).toLocaleDateString()}\n//                         <button onClick={() => startEditing(event.name, 'date', event.date)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'location' ? (\n//                       <input\n//                         type=\"text\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {event.location}\n//                         <button onClick={() => startEditing(event.name, 'location', event.location)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'description' ? (\n//                       <textarea value={editValue} onChange={(e) => setEditValue(e.target.value)} />\n//                     ) : (\n//                       <>\n//                         {event.description}\n//                         <button\n//                           onClick={() => startEditing(event.name, 'description', event.description)}\n//                         >\n//                           Edit\n//                         </button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name ? (\n//                       <>\n//                         <button onClick={updateEvent}>Save</button>\n//                         <button onClick={cancelEditing}>Cancel</button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => toggleTasks(event.name)}>\n//                           {tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'}\n//                         </button>\n//                         <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//                 {tasks[event.name] && (\n//                   <tr>\n//                     <td colSpan=\"5\">\n//                       <table className=\"task-table\">\n//                         <thead>\n//                           <tr>\n//                             <th>Task Name</th>\n//                             <th>Deadline</th>\n//                             <th>Status</th>\n//                             <th>Actions</th>\n\n//                           </tr>\n//                         </thead>\n//                         <tbody>\n//                           {tasks[event.name].map((task) => (\n//                             <tr key={task._id}>\n//                               <td>{task.name}</td>\n//                               <td>{new Date(task.deadline).toLocaleDateString()}</td>\n//                               <td>{task.status?' Completed ':' Pending '}</td>\n//                               <td>\n//                                 <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n//                               </td>\n//                             </tr>\n//                           ))}\n//                         </tbody>\n//                       </table>\n//                     </td>\n//                   </tr>\n//                 )}\n//               </React.Fragment>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/Event.css';\nimport { FaEdit, FaSave, FaTrash } from 'react-icons/fa'; // Import icons\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Event() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState({});\n  const [editingEventId, setEditingEventId] = useState(null);\n  const [editForm, setEditForm] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: ''\n  });\n  const [newEvent, setNewEvent] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: ''\n  });\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEvents');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n  const fetchTasksForEvent = async eventName => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEventTasks', {\n        params: {\n          name: eventName\n        }\n      });\n      setTasks(prevTasks => ({\n        ...prevTasks,\n        [eventName]: response.data\n      }));\n    } catch (error) {\n      console.error('Error fetching tasks for event:', error);\n    }\n  };\n  const toggleTasks = eventName => {\n    if (tasks[eventName]) {\n      setTasks(prevTasks => {\n        const updatedTasks = {\n          ...prevTasks\n        };\n        delete updatedTasks[eventName];\n        return updatedTasks;\n      });\n    } else {\n      fetchTasksForEvent(eventName);\n    }\n  };\n  const deleteTask = async taskName => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteTask', {\n        data: {\n          name: taskName\n        }\n      });\n      fetchTasksForEvent(taskName);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const deleteEvent = async eventName => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteEvent', {\n        data: {\n          name: eventName\n        }\n      });\n      fetchEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n  const startEditing = event => {\n    setEditingEventId(event._id);\n    setEditForm({\n      name: event.name,\n      date: event.date,\n      location: event.location,\n      description: event.description\n    });\n  };\n  const cancelEditing = () => {\n    setEditingEventId(null);\n    setEditForm({\n      name: '',\n      date: '',\n      location: '',\n      description: ''\n    });\n  };\n  const updateEvent = async () => {\n    try {\n      console.log('Updating event with ID:', editingEventId);\n      console.log('Updated data:', editForm);\n      const response = await axios.put(`http://localhost:5001/api/updateEvent/${editingEventId}`, editForm);\n      console.log('Update response:', response.data);\n      fetchEvents();\n      cancelEditing();\n    } catch (error) {\n      console.error('Error updating event:', error);\n    }\n  };\n  const addEvent = async () => {\n    try {\n      if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n        alert('All fields are required!');\n        return;\n      }\n      await axios.post('http://localhost:5001/api/postEvent', newEvent);\n      fetchEvents();\n      setNewEvent({\n        name: '',\n        date: '',\n        location: '',\n        description: ''\n      });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Event Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-event-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Event Name\",\n        value: newEvent.name,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newEvent.date,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          date: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Location\",\n        value: newEvent.location,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          location: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Description\",\n        value: newEvent.description,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addEvent,\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-table\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: events.map(event => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventId === event._id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: editForm.name,\n                  onChange: e => setEditForm({\n                    ...editForm,\n                    name: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 23\n                }, this) : event.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventId === event._id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  value: editForm.date,\n                  onChange: e => setEditForm({\n                    ...editForm,\n                    date: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 473,\n                  columnNumber: 23\n                }, this) : new Date(event.date).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventId === event._id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: editForm.location,\n                  onChange: e => setEditForm({\n                    ...editForm,\n                    location: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 23\n                }, this) : event.location\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventId === event._id ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  value: editForm.description,\n                  onChange: e => setEditForm({\n                    ...editForm,\n                    description: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 23\n                }, this) : event.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingEventId === event._id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: updateEvent,\n                    className: \"save-button\",\n                    children: [/*#__PURE__*/_jsxDEV(FaSave, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 507,\n                      columnNumber: 27\n                    }, this), \" Save\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 506,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: cancelEditing,\n                    className: \"cancel-button\",\n                    children: \"Cancel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 509,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => startEditing(event),\n                    className: \"edit-button\",\n                    children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 516,\n                      columnNumber: 27\n                    }, this), \" Edit\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 515,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => deleteEvent(event.name),\n                    className: \"delete-button\",\n                    children: [/*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 519,\n                      columnNumber: 27\n                    }, this), \" Delete\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 518,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 17\n            }, this), tasks[event.name] && /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"5\",\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"task-table\",\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Task Name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 531,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Deadline\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 532,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Status\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 533,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Actions\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 534,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 530,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 529,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: tasks[event.name].map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 540,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: new Date(task.deadline).toLocaleDateString()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 541,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.status ? 'Completed' : 'Pending'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 542,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"button\", {\n                          onClick: () => deleteTask(task.name),\n                          children: \"Delete Task\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 544,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 543,\n                        columnNumber: 31\n                      }, this)]\n                    }, task._id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 539,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 537,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 19\n            }, this)]\n          }, event._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n}\n_s(Event, \"cdGVDzeKGXlx0MrLMfsC+n8vDRc=\");\n_c = Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["React","useState","useEffect","axios","FaEdit","FaSave","FaTrash","jsxDEV","_jsxDEV","Fragment","_Fragment","Event","_s","events","setEvents","tasks","setTasks","editingEventId","setEditingEventId","editForm","setEditForm","name","date","location","description","newEvent","setNewEvent","fetchEvents","response","get","data","error","console","fetchTasksForEvent","eventName","params","prevTasks","toggleTasks","updatedTasks","deleteTask","taskName","delete","deleteEvent","startEditing","event","_id","cancelEditing","updateEvent","log","put","addEvent","alert","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","Date","toLocaleDateString","colSpan","task","deadline","status","_c","$RefreshReg$"],"sources":["/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/Event.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../styles/Event.css';\n\n// export default function Event() {\n//   const [events, setEvents] = useState([]);\n//   const [tasks, setTasks] = useState({});\n//   const [editingEventName, setEditingEventName] = useState(null);\n//   const [editField, setEditField] = useState('');\n//   const [editValue, setEditValue] = useState('');\n//   const [newEvent, setNewEvent] = useState({\n//     name: '',\n//     date: '',\n//     location: '',\n//     description: '',\n//   });\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getEvents');\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching events:', error);\n//     }\n//   };\n\n//   const fetchTasksForEvent = async (eventName) => {\n//     try {\n//       console.log(eventName);\n//       const response = await axios.get('http://localhost:5001/api/getEventTasks',{params: {\n//         name: eventName\n//       }});\n//       setTasks((prevTasks) => ({\n//         ...prevTasks,\n//         [eventName]: response.data,\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching tasks for event:', error);\n//     }\n//   };\n\n//   const toggleTasks = (eventName) => {\n//     if (tasks[eventName]) {\n//       setTasks((prevTasks) => {\n//         const updatedTasks = { ...prevTasks };\n//         delete updatedTasks[eventName];\n//         return updatedTasks;\n//       });\n//     }\n\n//     else\n//       fetchTasksForEvent(eventName);\n    \n//   };\n\n//   const deleteTask = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteTask', {\n//         data: { name:eventName},\n//       });\n//       fetchTasksForEvent(eventName);\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const deleteEvent = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteEvent', {\n//         data: { name: eventName },\n//       });\n//       fetchEvents();\n//     } catch (error) {\n//       console.error('Error deleting event:', error);\n//     }\n//   };\n\n//   const updateEvent = async () => {\n//     let endpoint = '';\n//     switch (editField) {\n//       case 'date':\n//         endpoint = 'http://localhost:5001/api/updateEventDate';\n//         break;\n//       case 'description':\n//         endpoint = 'http://localhost:5001/api/updateEventDescription';\n//         break;\n//       case 'location':\n//         endpoint = 'http://localhost:5001/api/updateEventLocation';\n//         break;\n//       default:\n//         console.error('Invalid edit field');\n//         return;\n//     }\n//     try {\n//       await axios.put(endpoint, { name: editingEventName, [editField]: editValue });\n//       fetchEvents();\n//       cancelEditing();\n//     } catch (error) {\n//       console.error(`Error updating event ${editField}:`, error);\n//     }\n//   };\n\n//   const addEvent = async () => {\n//     try {\n//       if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n//         alert('All fields are required!');\n//         return;\n//       }\n//       await axios.post('http://localhost:5001/api/postEvent', newEvent);\n//       fetchEvents();\n//       setNewEvent({ name: '', date: '', location: '', description: '' });\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   const startEditing = (eventName, field, currentValue) => {\n//     setEditingEventName(eventName);\n//     setEditField(field);\n//     setEditValue(currentValue);\n//   };\n\n//   const cancelEditing = () => {\n//     setEditingEventName(null);\n//     setEditField('');\n//     setEditValue('');\n//   };\n\n//   return (\n//     <div className=\"event-page\">\n//       <h1>Event Management</h1>\n\n//       <div className=\"add-event-form\">\n//         <h2>Add New Event</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Name\"\n//           value={newEvent.name}\n//           onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={newEvent.date}\n//           onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={newEvent.location}\n//           onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={newEvent.description}\n//           onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n//         ></textarea>\n//         <button onClick={addEvent}>Add Event</button>\n//       </div>\n\n//       <div className=\"event-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Date</th>\n//               <th>Location</th>\n//               <th>Description</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {events.map((event) => (\n              \n//               <React.Fragment key={event._id}>\n//                 <tr>\n//                   <td>{event.name}</td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'date' ? (\n//                       <input\n//                         type=\"date\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {new Date(event.date).toLocaleDateString()}\n//                         <button onClick={() => startEditing(event.name, 'date', event.date)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'location' ? (\n//                       <input\n//                         type=\"text\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {event.location}\n//                         <button onClick={() => startEditing(event.name, 'location', event.location)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'description' ? (\n//                       <textarea value={editValue} onChange={(e) => setEditValue(e.target.value)} />\n//                     ) : (\n//                       <>\n//                         {event.description}\n//                         <button\n//                           onClick={() => startEditing(event.name, 'description', event.description)}\n//                         >\n//                           Edit\n//                         </button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name ? (\n//                       <>\n//                         <button onClick={updateEvent}>Save</button>\n//                         <button onClick={cancelEditing}>Cancel</button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => toggleTasks(event.name)}>\n//                           {tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'}\n//                         </button>\n//                         <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//                 {tasks[event.name] && (\n//                   <tr>\n//                     <td colSpan=\"5\">\n//                       <table className=\"task-table\">\n//                         <thead>\n//                           <tr>\n//                             <th>Task Name</th>\n//                             <th>Deadline</th>\n//                             <th>Status</th>\n//                             <th>Actions</th>\n                            \n//                           </tr>\n//                         </thead>\n//                         <tbody>\n//                           {tasks[event.name].map((task) => (\n//                             <tr key={task._id}>\n//                               <td>{task.name}</td>\n//                               <td>{new Date(task.deadline).toLocaleDateString()}</td>\n//                               <td>{task.status?' Completed ':' Pending '}</td>\n//                               <td>\n//                                 <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n//                               </td>\n//                             </tr>\n//                           ))}\n//                         </tbody>\n//                       </table>\n//                     </td>\n//                   </tr>\n//                 )}\n//               </React.Fragment>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/Event.css';\nimport { FaEdit, FaSave, FaTrash } from 'react-icons/fa'; // Import icons\n\nexport default function Event() {\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState({});\n  const [editingEventId, setEditingEventId] = useState(null);\n  const [editForm, setEditForm] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: '',\n  });\n  const [newEvent, setNewEvent] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: '',\n  });\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEvents');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n\n  const fetchTasksForEvent = async (eventName) => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEventTasks', {\n        params: { name: eventName },\n      });\n      setTasks((prevTasks) => ({\n        ...prevTasks,\n        [eventName]: response.data,\n      }));\n    } catch (error) {\n      console.error('Error fetching tasks for event:', error);\n    }\n  };\n\n  const toggleTasks = (eventName) => {\n    if (tasks[eventName]) {\n      setTasks((prevTasks) => {\n        const updatedTasks = { ...prevTasks };\n        delete updatedTasks[eventName];\n        return updatedTasks;\n      });\n    } else {\n      fetchTasksForEvent(eventName);\n    }\n  };\n\n  const deleteTask = async (taskName) => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteTask', {\n        data: { name: taskName },\n      });\n      fetchTasksForEvent(taskName);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const deleteEvent = async (eventName) => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteEvent', {\n        data: { name: eventName },\n      });\n      fetchEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n\n  const startEditing = (event) => {\n    setEditingEventId(event._id);\n    setEditForm({\n      name: event.name,\n      date: event.date,\n      location: event.location,\n      description: event.description,\n    });\n  };\n\n  const cancelEditing = () => {\n    setEditingEventId(null);\n    setEditForm({\n      name: '',\n      date: '',\n      location: '',\n      description: '',\n    });\n  };\n\n  const updateEvent = async () => {\n    try {\n      console.log('Updating event with ID:', editingEventId);\n      console.log('Updated data:', editForm);\n\n      const response = await axios.put(\n        `http://localhost:5001/api/updateEvent/${editingEventId}`,\n        editForm\n      );\n\n      console.log('Update response:', response.data);\n\n      fetchEvents();\n      cancelEditing();\n    } catch (error) {\n      console.error('Error updating event:', error);\n    }\n  };\n\n  const addEvent = async () => {\n    try {\n      if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n        alert('All fields are required!');\n        return;\n      }\n      await axios.post('http://localhost:5001/api/postEvent', newEvent);\n      fetchEvents();\n      setNewEvent({ name: '', date: '', location: '', description: '' });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  return (\n    <div className=\"event-page\">\n      <h1>Event Management</h1>\n\n      <div className=\"add-event-form\">\n        <h2>Add New Event</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Event Name\"\n          value={newEvent.name}\n          onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n        />\n        <input\n          type=\"date\"\n          value={newEvent.date}\n          onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Location\"\n          value={newEvent.location}\n          onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n        />\n        <textarea\n          placeholder=\"Description\"\n          value={newEvent.description}\n          onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n        ></textarea>\n        <button onClick={addEvent}>Add Event</button>\n      </div>\n\n      <div className=\"event-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Date</th>\n              <th>Location</th>\n              <th>Description</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {events.map((event) => (\n              <React.Fragment key={event._id}>\n                <tr>\n                  <td>\n                    {editingEventId === event._id ? (\n                      <input\n                        type=\"text\"\n                        value={editForm.name}\n                        onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}\n                      />\n                    ) : (\n                      event.name\n                    )}\n                  </td>\n                  <td>\n                    {editingEventId === event._id ? (\n                      <input\n                        type=\"date\"\n                        value={editForm.date}\n                        onChange={(e) => setEditForm({ ...editForm, date: e.target.value })}\n                      />\n                    ) : (\n                      new Date(event.date).toLocaleDateString()\n                    )}\n                  </td>\n                  <td>\n                    {editingEventId === event._id ? (\n                      <input\n                        type=\"text\"\n                        value={editForm.location}\n                        onChange={(e) => setEditForm({ ...editForm, location: e.target.value })}\n                      />\n                    ) : (\n                      event.location\n                    )}\n                  </td>\n                  <td>\n                    {editingEventId === event._id ? (\n                      <textarea\n                        value={editForm.description}\n                        onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}\n                      />\n                    ) : (\n                      event.description\n                    )}\n                  </td>\n                  <td>\n                    {editingEventId === event._id ? (\n                      <>\n                        <button onClick={updateEvent} className=\"save-button\">\n                          <FaSave /> Save\n                        </button>\n                        <button onClick={cancelEditing} className=\"cancel-button\">\n                          Cancel\n                        </button>\n                      </>\n                    ) : (\n                      <>\n                        <button onClick={() => startEditing(event)} className=\"edit-button\">\n                          <FaEdit /> Edit\n                        </button>\n                        <button onClick={() => deleteEvent(event.name)} className=\"delete-button\">\n                          <FaTrash /> Delete\n                        </button>\n                      </>\n                    )}\n                  </td>\n                </tr>\n                {tasks[event.name] && (\n                  <tr>\n                    <td colSpan=\"5\">\n                      <table className=\"task-table\">\n                        <thead>\n                          <tr>\n                            <th>Task Name</th>\n                            <th>Deadline</th>\n                            <th>Status</th>\n                            <th>Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tasks[event.name].map((task) => (\n                            <tr key={task._id}>\n                              <td>{task.name}</td>\n                              <td>{new Date(task.deadline).toLocaleDateString()}</td>\n                              <td>{task.status ? 'Completed' : 'Pending'}</td>\n                              <td>\n                                <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </td>\n                  </tr>\n                )}\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,qBAAqB;AAC5B,SAASC,MAAM,EAAEC,MAAM,EAAEC,OAAO,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1D,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC;IACvCoB,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC;IACvCoB,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE;EACf,CAAC,CAAC;EAEFtB,SAAS,CAAC,MAAM;IACdyB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAAC,qCAAqC,CAAC;MACvEf,SAAS,CAACc,QAAQ,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,MAAME,kBAAkB,GAAG,MAAOC,SAAS,IAAK;IAC9C,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAAC,yCAAyC,EAAE;QAC1EM,MAAM,EAAE;UAAEd,IAAI,EAAEa;QAAU;MAC5B,CAAC,CAAC;MACFlB,QAAQ,CAAEoB,SAAS,KAAM;QACvB,GAAGA,SAAS;QACZ,CAACF,SAAS,GAAGN,QAAQ,CAACE;MACxB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,MAAMM,WAAW,GAAIH,SAAS,IAAK;IACjC,IAAInB,KAAK,CAACmB,SAAS,CAAC,EAAE;MACpBlB,QAAQ,CAAEoB,SAAS,IAAK;QACtB,MAAME,YAAY,GAAG;UAAE,GAAGF;QAAU,CAAC;QACrC,OAAOE,YAAY,CAACJ,SAAS,CAAC;QAC9B,OAAOI,YAAY;MACrB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,kBAAkB,CAACC,SAAS,CAAC;IAC/B;EACF,CAAC;EAED,MAAMK,UAAU,GAAG,MAAOC,QAAQ,IAAK;IACrC,IAAI;MACF,MAAMrC,KAAK,CAACsC,MAAM,CAAC,sCAAsC,EAAE;QACzDX,IAAI,EAAE;UAAET,IAAI,EAAEmB;QAAS;MACzB,CAAC,CAAC;MACFP,kBAAkB,CAACO,QAAQ,CAAC;IAC9B,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMW,WAAW,GAAG,MAAOR,SAAS,IAAK;IACvC,IAAI;MACF,MAAM/B,KAAK,CAACsC,MAAM,CAAC,uCAAuC,EAAE;QAC1DX,IAAI,EAAE;UAAET,IAAI,EAAEa;QAAU;MAC1B,CAAC,CAAC;MACFP,WAAW,CAAC,CAAC;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAMY,YAAY,GAAIC,KAAK,IAAK;IAC9B1B,iBAAiB,CAAC0B,KAAK,CAACC,GAAG,CAAC;IAC5BzB,WAAW,CAAC;MACVC,IAAI,EAAEuB,KAAK,CAACvB,IAAI;MAChBC,IAAI,EAAEsB,KAAK,CAACtB,IAAI;MAChBC,QAAQ,EAAEqB,KAAK,CAACrB,QAAQ;MACxBC,WAAW,EAAEoB,KAAK,CAACpB;IACrB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMsB,aAAa,GAAGA,CAAA,KAAM;IAC1B5B,iBAAiB,CAAC,IAAI,CAAC;IACvBE,WAAW,CAAC;MACVC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC;EAED,MAAMuB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACFf,OAAO,CAACgB,GAAG,CAAC,yBAAyB,EAAE/B,cAAc,CAAC;MACtDe,OAAO,CAACgB,GAAG,CAAC,eAAe,EAAE7B,QAAQ,CAAC;MAEtC,MAAMS,QAAQ,GAAG,MAAMzB,KAAK,CAAC8C,GAAG,CAC9B,yCAAyChC,cAAc,EAAE,EACzDE,QACF,CAAC;MAEDa,OAAO,CAACgB,GAAG,CAAC,kBAAkB,EAAEpB,QAAQ,CAACE,IAAI,CAAC;MAE9CH,WAAW,CAAC,CAAC;MACbmB,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAMmB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,IAAI,CAACzB,QAAQ,CAACJ,IAAI,IAAI,CAACI,QAAQ,CAACH,IAAI,IAAI,CAACG,QAAQ,CAACF,QAAQ,IAAI,CAACE,QAAQ,CAACD,WAAW,EAAE;QACnF2B,KAAK,CAAC,0BAA0B,CAAC;QACjC;MACF;MACA,MAAMhD,KAAK,CAACiD,IAAI,CAAC,qCAAqC,EAAE3B,QAAQ,CAAC;MACjEE,WAAW,CAAC,CAAC;MACbD,WAAW,CAAC;QAAEL,IAAI,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAG,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,oBACEvB,OAAA;IAAK6C,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzB9C,OAAA;MAAA8C,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzBlD,OAAA;MAAK6C,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B9C,OAAA;QAAA8C,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBlD,OAAA;QACEmD,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,YAAY;QACxBC,KAAK,EAAEpC,QAAQ,CAACJ,IAAK;QACrByC,QAAQ,EAAGC,CAAC,IAAKrC,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEJ,IAAI,EAAE0C,CAAC,CAACC,MAAM,CAACH;QAAM,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC,eACFlD,OAAA;QACEmD,IAAI,EAAC,MAAM;QACXE,KAAK,EAAEpC,QAAQ,CAACH,IAAK;QACrBwC,QAAQ,EAAGC,CAAC,IAAKrC,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEH,IAAI,EAAEyC,CAAC,CAACC,MAAM,CAACH;QAAM,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC,eACFlD,OAAA;QACEmD,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,UAAU;QACtBC,KAAK,EAAEpC,QAAQ,CAACF,QAAS;QACzBuC,QAAQ,EAAGC,CAAC,IAAKrC,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEF,QAAQ,EAAEwC,CAAC,CAACC,MAAM,CAACH;QAAM,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC,eACFlD,OAAA;QACEoD,WAAW,EAAC,aAAa;QACzBC,KAAK,EAAEpC,QAAQ,CAACD,WAAY;QAC5BsC,QAAQ,EAAGC,CAAC,IAAKrC,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAED,WAAW,EAAEuC,CAAC,CAACC,MAAM,CAACH;QAAM,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,eACZlD,OAAA;QAAQyD,OAAO,EAAEf,QAAS;QAAAI,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eAENlD,OAAA;MAAK6C,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1B9C,OAAA;QAAA8C,QAAA,gBACE9C,OAAA;UAAA8C,QAAA,eACE9C,OAAA;YAAA8C,QAAA,gBACE9C,OAAA;cAAA8C,QAAA,EAAI;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACblD,OAAA;cAAA8C,QAAA,EAAI;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACblD,OAAA;cAAA8C,QAAA,EAAI;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjBlD,OAAA;cAAA8C,QAAA,EAAI;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpBlD,OAAA;cAAA8C,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRlD,OAAA;UAAA8C,QAAA,EACGzC,MAAM,CAACqD,GAAG,CAAEtB,KAAK,iBAChBpC,OAAA,CAACR,KAAK,CAACS,QAAQ;YAAA6C,QAAA,gBACb9C,OAAA;cAAA8C,QAAA,gBACE9C,OAAA;gBAAA8C,QAAA,EACGrC,cAAc,KAAK2B,KAAK,CAACC,GAAG,gBAC3BrC,OAAA;kBACEmD,IAAI,EAAC,MAAM;kBACXE,KAAK,EAAE1C,QAAQ,CAACE,IAAK;kBACrByC,QAAQ,EAAGC,CAAC,IAAK3C,WAAW,CAAC;oBAAE,GAAGD,QAAQ;oBAAEE,IAAI,EAAE0C,CAAC,CAACC,MAAM,CAACH;kBAAM,CAAC;gBAAE;kBAAAN,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrE,CAAC,GAEFd,KAAK,CAACvB;cACP;gBAAAkC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACLlD,OAAA;gBAAA8C,QAAA,EACGrC,cAAc,KAAK2B,KAAK,CAACC,GAAG,gBAC3BrC,OAAA;kBACEmD,IAAI,EAAC,MAAM;kBACXE,KAAK,EAAE1C,QAAQ,CAACG,IAAK;kBACrBwC,QAAQ,EAAGC,CAAC,IAAK3C,WAAW,CAAC;oBAAE,GAAGD,QAAQ;oBAAEG,IAAI,EAAEyC,CAAC,CAACC,MAAM,CAACH;kBAAM,CAAC;gBAAE;kBAAAN,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrE,CAAC,GAEF,IAAIS,IAAI,CAACvB,KAAK,CAACtB,IAAI,CAAC,CAAC8C,kBAAkB,CAAC;cACzC;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACLlD,OAAA;gBAAA8C,QAAA,EACGrC,cAAc,KAAK2B,KAAK,CAACC,GAAG,gBAC3BrC,OAAA;kBACEmD,IAAI,EAAC,MAAM;kBACXE,KAAK,EAAE1C,QAAQ,CAACI,QAAS;kBACzBuC,QAAQ,EAAGC,CAAC,IAAK3C,WAAW,CAAC;oBAAE,GAAGD,QAAQ;oBAAEI,QAAQ,EAAEwC,CAAC,CAACC,MAAM,CAACH;kBAAM,CAAC;gBAAE;kBAAAN,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzE,CAAC,GAEFd,KAAK,CAACrB;cACP;gBAAAgC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACLlD,OAAA;gBAAA8C,QAAA,EACGrC,cAAc,KAAK2B,KAAK,CAACC,GAAG,gBAC3BrC,OAAA;kBACEqD,KAAK,EAAE1C,QAAQ,CAACK,WAAY;kBAC5BsC,QAAQ,EAAGC,CAAC,IAAK3C,WAAW,CAAC;oBAAE,GAAGD,QAAQ;oBAAEK,WAAW,EAAEuC,CAAC,CAACC,MAAM,CAACH;kBAAM,CAAC;gBAAE;kBAAAN,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC5E,CAAC,GAEFd,KAAK,CAACpB;cACP;gBAAA+B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACLlD,OAAA;gBAAA8C,QAAA,EACGrC,cAAc,KAAK2B,KAAK,CAACC,GAAG,gBAC3BrC,OAAA,CAAAE,SAAA;kBAAA4C,QAAA,gBACE9C,OAAA;oBAAQyD,OAAO,EAAElB,WAAY;oBAACM,SAAS,EAAC,aAAa;oBAAAC,QAAA,gBACnD9C,OAAA,CAACH,MAAM;sBAAAkD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAC,SACZ;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eACTlD,OAAA;oBAAQyD,OAAO,EAAEnB,aAAc;oBAACO,SAAS,EAAC,eAAe;oBAAAC,QAAA,EAAC;kBAE1D;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA,eACT,CAAC,gBAEHlD,OAAA,CAAAE,SAAA;kBAAA4C,QAAA,gBACE9C,OAAA;oBAAQyD,OAAO,EAAEA,CAAA,KAAMtB,YAAY,CAACC,KAAK,CAAE;oBAACS,SAAS,EAAC,aAAa;oBAAAC,QAAA,gBACjE9C,OAAA,CAACJ,MAAM;sBAAAmD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAC,SACZ;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eACTlD,OAAA;oBAAQyD,OAAO,EAAEA,CAAA,KAAMvB,WAAW,CAACE,KAAK,CAACvB,IAAI,CAAE;oBAACgC,SAAS,EAAC,eAAe;oBAAAC,QAAA,gBACvE9C,OAAA,CAACF,OAAO;sBAAAiD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAC,WACb;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA,eACT;cACH;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,EACJ3C,KAAK,CAAC6B,KAAK,CAACvB,IAAI,CAAC,iBAChBb,OAAA;cAAA8C,QAAA,eACE9C,OAAA;gBAAI6D,OAAO,EAAC,GAAG;gBAAAf,QAAA,eACb9C,OAAA;kBAAO6C,SAAS,EAAC,YAAY;kBAAAC,QAAA,gBAC3B9C,OAAA;oBAAA8C,QAAA,eACE9C,OAAA;sBAAA8C,QAAA,gBACE9C,OAAA;wBAAA8C,QAAA,EAAI;sBAAS;wBAAAC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAI,CAAC,eAClBlD,OAAA;wBAAA8C,QAAA,EAAI;sBAAQ;wBAAAC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAI,CAAC,eACjBlD,OAAA;wBAAA8C,QAAA,EAAI;sBAAM;wBAAAC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAI,CAAC,eACflD,OAAA;wBAAA8C,QAAA,EAAI;sBAAO;wBAAAC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAI,CAAC;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACd;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CAAC,eACRlD,OAAA;oBAAA8C,QAAA,EACGvC,KAAK,CAAC6B,KAAK,CAACvB,IAAI,CAAC,CAAC6C,GAAG,CAAEI,IAAI,iBAC1B9D,OAAA;sBAAA8C,QAAA,gBACE9C,OAAA;wBAAA8C,QAAA,EAAKgB,IAAI,CAACjD;sBAAI;wBAAAkC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK,CAAC,eACpBlD,OAAA;wBAAA8C,QAAA,EAAK,IAAIa,IAAI,CAACG,IAAI,CAACC,QAAQ,CAAC,CAACH,kBAAkB,CAAC;sBAAC;wBAAAb,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK,CAAC,eACvDlD,OAAA;wBAAA8C,QAAA,EAAKgB,IAAI,CAACE,MAAM,GAAG,WAAW,GAAG;sBAAS;wBAAAjB,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK,CAAC,eAChDlD,OAAA;wBAAA8C,QAAA,eACE9C,OAAA;0BAAQyD,OAAO,EAAEA,CAAA,KAAM1B,UAAU,CAAC+B,IAAI,CAACjD,IAAI,CAAE;0BAAAiC,QAAA,EAAC;wBAAW;0BAAAC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAQ;sBAAC;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAChE,CAAC;oBAAA,GANEY,IAAI,CAACzB,GAAG;sBAAAU,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAOb,CACL;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACG,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACL;UAAA,GA9FkBd,KAAK,CAACC,GAAG;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA+Fd,CACjB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9C,EAAA,CArRuBD,KAAK;AAAA8D,EAAA,GAAL9D,KAAK;AAAA,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}