{"ast":null,"code":"var _jsxFileName = \"/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/Event.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../styles/Event.css';\n\n// export default function Event() {\n//   const [events, setEvents] = useState([]);\n//   const [tasks, setTasks] = useState({});\n//   const [editingEventName, setEditingEventName] = useState(null);\n//   const [editField, setEditField] = useState('');\n//   const [editValue, setEditValue] = useState('');\n//   const [newEvent, setNewEvent] = useState({\n//     name: '',\n//     date: '',\n//     location: '',\n//     description: '',\n//   });\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getEvents');\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching events:', error);\n//     }\n//   };\n\n//   const fetchTasksForEvent = async (eventName) => {\n//     try {\n//       console.log(eventName);\n//       const response = await axios.get('http://localhost:5001/api/getEventTasks',{params: {\n//         name: eventName\n//       }});\n//       setTasks((prevTasks) => ({\n//         ...prevTasks,\n//         [eventName]: response.data,\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching tasks for event:', error);\n//     }\n//   };\n\n//   const toggleTasks = (eventName) => {\n//     if (tasks[eventName]) {\n//       setTasks((prevTasks) => {\n//         const updatedTasks = { ...prevTasks };\n//         delete updatedTasks[eventName];\n//         return updatedTasks;\n//       });\n//     }\n\n//     else\n//       fetchTasksForEvent(eventName);\n\n//   };\n\n//   const deleteTask = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteTask', {\n//         data: { name:eventName},\n//       });\n//       fetchTasksForEvent(eventName);\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const deleteEvent = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteEvent', {\n//         data: { name: eventName },\n//       });\n//       fetchEvents();\n//     } catch (error) {\n//       console.error('Error deleting event:', error);\n//     }\n//   };\n\n//   const updateEvent = async () => {\n//     let endpoint = '';\n//     switch (editField) {\n//       case 'date':\n//         endpoint = 'http://localhost:5001/api/updateEventDate';\n//         break;\n//       case 'description':\n//         endpoint = 'http://localhost:5001/api/updateEventDescription';\n//         break;\n//       case 'location':\n//         endpoint = 'http://localhost:5001/api/updateEventLocation';\n//         break;\n//       default:\n//         console.error('Invalid edit field');\n//         return;\n//     }\n//     try {\n//       await axios.put(endpoint, { name: editingEventName, [editField]: editValue });\n//       fetchEvents();\n//       cancelEditing();\n//     } catch (error) {\n//       console.error(`Error updating event ${editField}:`, error);\n//     }\n//   };\n\n//   const addEvent = async () => {\n//     try {\n//       if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n//         alert('All fields are required!');\n//         return;\n//       }\n//       await axios.post('http://localhost:5001/api/postEvent', newEvent);\n//       fetchEvents();\n//       setNewEvent({ name: '', date: '', location: '', description: '' });\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   const startEditing = (eventName, field, currentValue) => {\n//     setEditingEventName(eventName);\n//     setEditField(field);\n//     setEditValue(currentValue);\n//   };\n\n//   const cancelEditing = () => {\n//     setEditingEventName(null);\n//     setEditField('');\n//     setEditValue('');\n//   };\n\n//   return (\n//     <div className=\"event-page\">\n//       <h1>Event Management</h1>\n\n//       <div className=\"add-event-form\">\n//         <h2>Add New Event</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Name\"\n//           value={newEvent.name}\n//           onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={newEvent.date}\n//           onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={newEvent.location}\n//           onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={newEvent.description}\n//           onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n//         ></textarea>\n//         <button onClick={addEvent}>Add Event</button>\n//       </div>\n\n//       <div className=\"event-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Date</th>\n//               <th>Location</th>\n//               <th>Description</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {events.map((event) => (\n\n//               <React.Fragment key={event._id}>\n//                 <tr>\n//                   <td>{event.name}</td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'date' ? (\n//                       <input\n//                         type=\"date\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {new Date(event.date).toLocaleDateString()}\n//                         <button onClick={() => startEditing(event.name, 'date', event.date)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'location' ? (\n//                       <input\n//                         type=\"text\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {event.location}\n//                         <button onClick={() => startEditing(event.name, 'location', event.location)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'description' ? (\n//                       <textarea value={editValue} onChange={(e) => setEditValue(e.target.value)} />\n//                     ) : (\n//                       <>\n//                         {event.description}\n//                         <button\n//                           onClick={() => startEditing(event.name, 'description', event.description)}\n//                         >\n//                           Edit\n//                         </button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name ? (\n//                       <>\n//                         <button onClick={updateEvent}>Save</button>\n//                         <button onClick={cancelEditing}>Cancel</button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => toggleTasks(event.name)}>\n//                           {tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'}\n//                         </button>\n//                         <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//                 {tasks[event.name] && (\n//                   <tr>\n//                     <td colSpan=\"5\">\n//                       <table className=\"task-table\">\n//                         <thead>\n//                           <tr>\n//                             <th>Task Name</th>\n//                             <th>Deadline</th>\n//                             <th>Status</th>\n//                             <th>Actions</th>\n\n//                           </tr>\n//                         </thead>\n//                         <tbody>\n//                           {tasks[event.name].map((task) => (\n//                             <tr key={task._id}>\n//                               <td>{task.name}</td>\n//                               <td>{new Date(task.deadline).toLocaleDateString()}</td>\n//                               <td>{task.status?' Completed ':' Pending '}</td>\n//                               <td>\n//                                 <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n//                               </td>\n//                             </tr>\n//                           ))}\n//                         </tbody>\n//                       </table>\n//                     </td>\n//                   </tr>\n//                 )}\n//               </React.Fragment>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/Event.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Event() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [newEvent, setNewEvent] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: ''\n  });\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEvents');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n  const addEvent = async () => {\n    try {\n      if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n        alert('All fields are required!');\n        return;\n      }\n      await axios.post('http://localhost:5001/api/postEvent', newEvent);\n      fetchEvents();\n      setNewEvent({\n        name: '',\n        date: '',\n        location: '',\n        description: ''\n      });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n  const deleteEvent = async eventName => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteEvent', {\n        data: {\n          name: eventName\n        }\n      });\n      fetchEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Event Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-event-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Event Name\",\n        value: newEvent.name,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newEvent.date,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          date: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Location\",\n        value: newEvent.location,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          location: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Description\",\n        value: newEvent.description,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addEvent,\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list\",\n      children: events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: event.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 16\n          }, this), \" \", event.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 16\n          }, this), \" \", event.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 16\n          }, this), \" \", new Date(event.date).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteEvent(event.name),\n          children: \"Delete Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this)]\n      }, event._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n}\n_s(Event, \"tjoAZG9IDzcwxxaum0po3KylcY8=\");\n_c = Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Event","_s","events","setEvents","newEvent","setNewEvent","name","date","location","description","fetchEvents","response","get","data","error","console","addEvent","alert","post","deleteEvent","eventName","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","event","Date","toLocaleDateString","_id","_c","$RefreshReg$"],"sources":["/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/Event.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../styles/Event.css';\n\n// export default function Event() {\n//   const [events, setEvents] = useState([]);\n//   const [tasks, setTasks] = useState({});\n//   const [editingEventName, setEditingEventName] = useState(null);\n//   const [editField, setEditField] = useState('');\n//   const [editValue, setEditValue] = useState('');\n//   const [newEvent, setNewEvent] = useState({\n//     name: '',\n//     date: '',\n//     location: '',\n//     description: '',\n//   });\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getEvents');\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching events:', error);\n//     }\n//   };\n\n//   const fetchTasksForEvent = async (eventName) => {\n//     try {\n//       console.log(eventName);\n//       const response = await axios.get('http://localhost:5001/api/getEventTasks',{params: {\n//         name: eventName\n//       }});\n//       setTasks((prevTasks) => ({\n//         ...prevTasks,\n//         [eventName]: response.data,\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching tasks for event:', error);\n//     }\n//   };\n\n//   const toggleTasks = (eventName) => {\n//     if (tasks[eventName]) {\n//       setTasks((prevTasks) => {\n//         const updatedTasks = { ...prevTasks };\n//         delete updatedTasks[eventName];\n//         return updatedTasks;\n//       });\n//     }\n\n//     else\n//       fetchTasksForEvent(eventName);\n    \n//   };\n\n//   const deleteTask = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteTask', {\n//         data: { name:eventName},\n//       });\n//       fetchTasksForEvent(eventName);\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const deleteEvent = async (eventName) => {\n//     try {\n//       await axios.delete('http://localhost:5001/api/deleteEvent', {\n//         data: { name: eventName },\n//       });\n//       fetchEvents();\n//     } catch (error) {\n//       console.error('Error deleting event:', error);\n//     }\n//   };\n\n//   const updateEvent = async () => {\n//     let endpoint = '';\n//     switch (editField) {\n//       case 'date':\n//         endpoint = 'http://localhost:5001/api/updateEventDate';\n//         break;\n//       case 'description':\n//         endpoint = 'http://localhost:5001/api/updateEventDescription';\n//         break;\n//       case 'location':\n//         endpoint = 'http://localhost:5001/api/updateEventLocation';\n//         break;\n//       default:\n//         console.error('Invalid edit field');\n//         return;\n//     }\n//     try {\n//       await axios.put(endpoint, { name: editingEventName, [editField]: editValue });\n//       fetchEvents();\n//       cancelEditing();\n//     } catch (error) {\n//       console.error(`Error updating event ${editField}:`, error);\n//     }\n//   };\n\n//   const addEvent = async () => {\n//     try {\n//       if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n//         alert('All fields are required!');\n//         return;\n//       }\n//       await axios.post('http://localhost:5001/api/postEvent', newEvent);\n//       fetchEvents();\n//       setNewEvent({ name: '', date: '', location: '', description: '' });\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   const startEditing = (eventName, field, currentValue) => {\n//     setEditingEventName(eventName);\n//     setEditField(field);\n//     setEditValue(currentValue);\n//   };\n\n//   const cancelEditing = () => {\n//     setEditingEventName(null);\n//     setEditField('');\n//     setEditValue('');\n//   };\n\n//   return (\n//     <div className=\"event-page\">\n//       <h1>Event Management</h1>\n\n//       <div className=\"add-event-form\">\n//         <h2>Add New Event</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Name\"\n//           value={newEvent.name}\n//           onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={newEvent.date}\n//           onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={newEvent.location}\n//           onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={newEvent.description}\n//           onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n//         ></textarea>\n//         <button onClick={addEvent}>Add Event</button>\n//       </div>\n\n//       <div className=\"event-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Date</th>\n//               <th>Location</th>\n//               <th>Description</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {events.map((event) => (\n              \n//               <React.Fragment key={event._id}>\n//                 <tr>\n//                   <td>{event.name}</td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'date' ? (\n//                       <input\n//                         type=\"date\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {new Date(event.date).toLocaleDateString()}\n//                         <button onClick={() => startEditing(event.name, 'date', event.date)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'location' ? (\n//                       <input\n//                         type=\"text\"\n//                         value={editValue}\n//                         onChange={(e) => setEditValue(e.target.value)}\n//                       />\n//                     ) : (\n//                       <>\n//                         {event.location}\n//                         <button onClick={() => startEditing(event.name, 'location', event.location)}>Edit</button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name && editField === 'description' ? (\n//                       <textarea value={editValue} onChange={(e) => setEditValue(e.target.value)} />\n//                     ) : (\n//                       <>\n//                         {event.description}\n//                         <button\n//                           onClick={() => startEditing(event.name, 'description', event.description)}\n//                         >\n//                           Edit\n//                         </button>\n//                       </>\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingEventName === event.name ? (\n//                       <>\n//                         <button onClick={updateEvent}>Save</button>\n//                         <button onClick={cancelEditing}>Cancel</button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => toggleTasks(event.name)}>\n//                           {tasks[event.name] ? 'Hide Tasks' : 'Show Tasks'}\n//                         </button>\n//                         <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//                 {tasks[event.name] && (\n//                   <tr>\n//                     <td colSpan=\"5\">\n//                       <table className=\"task-table\">\n//                         <thead>\n//                           <tr>\n//                             <th>Task Name</th>\n//                             <th>Deadline</th>\n//                             <th>Status</th>\n//                             <th>Actions</th>\n                            \n//                           </tr>\n//                         </thead>\n//                         <tbody>\n//                           {tasks[event.name].map((task) => (\n//                             <tr key={task._id}>\n//                               <td>{task.name}</td>\n//                               <td>{new Date(task.deadline).toLocaleDateString()}</td>\n//                               <td>{task.status?' Completed ':' Pending '}</td>\n//                               <td>\n//                                 <button onClick={() => deleteTask(task.name)}>Delete Task</button>\n//                               </td>\n//                             </tr>\n//                           ))}\n//                         </tbody>\n//                       </table>\n//                     </td>\n//                   </tr>\n//                 )}\n//               </React.Fragment>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/Event.css';\n\nexport default function Event() {\n  const [events, setEvents] = useState([]);\n  const [newEvent, setNewEvent] = useState({\n    name: '',\n    date: '',\n    location: '',\n    description: '',\n  });\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getEvents');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n\n  const addEvent = async () => {\n    try {\n      if (!newEvent.name || !newEvent.date || !newEvent.location || !newEvent.description) {\n        alert('All fields are required!');\n        return;\n      }\n      await axios.post('http://localhost:5001/api/postEvent', newEvent);\n      fetchEvents();\n      setNewEvent({ name: '', date: '', location: '', description: '' });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  const deleteEvent = async (eventName) => {\n    try {\n      await axios.delete('http://localhost:5001/api/deleteEvent', {\n        data: { name: eventName },\n      });\n      fetchEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n\n  return (\n    <div className=\"event-page\">\n      <h1>Event Management</h1>\n\n      <div className=\"add-event-form\">\n        <h2>Add New Event</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Event Name\"\n          value={newEvent.name}\n          onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}\n        />\n        <input\n          type=\"date\"\n          value={newEvent.date}\n          onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Location\"\n          value={newEvent.location}\n          onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n        />\n        <textarea\n          placeholder=\"Description\"\n          value={newEvent.description}\n          onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n        ></textarea>\n        <button onClick={addEvent}>Add Event</button>\n      </div>\n\n      <div className=\"event-list\">\n        {events.map((event) => (\n          <div key={event._id} className=\"event-card\">\n            <h3>{event.name}</h3>\n            <p><strong>Description:</strong> {event.description}</p>\n            <p><strong>Location:</strong> {event.location}</p>\n            <p><strong>Date:</strong> {new Date(event.date).toLocaleDateString()}</p>\n            <button onClick={() => deleteEvent(event.name)}>Delete Event</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}