{"ast":null,"code":"var _jsxFileName = \"/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/TaskTracker.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import '../styles/taskDashboard.css';\n\n// // export default function TaskTracker() {\n// //   const [tasks, setTasks] = useState([]);\n// //   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n// //   const [editingTaskId, setEditingTaskId] = useState(null);\n\n// //   const [events, setEvents] = useState([]);\n\n// //   // Fetch tasks from the backend\n// //   const fetchTasks = async () => {\n// //     try {\n// //       const response = await axios.get('http://localhost:5001/api/getTasks');\n// //       setTasks(response.data);\n// //     } catch (error) {\n// //       console.error('Error fetching tasks:', error);\n// //     }\n// //   };\n\n// //   // Fetch events from the backend\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/api/getEvents');\n// //         setEvents(response.data); // Assume the API returns an array of events\n// //       } catch (error) {\n// //         console.error('Error fetching events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   // Add a new task\n// //   const addTask = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n// //       await axios.post('http://localhost:5001/api/postTask', taskForm);\n// //       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n// //       fetchTasks(); // Refresh the tasks list\n// //       console.log('Task added successfully!');\n// //     } catch (error) {\n// //       console.error('Error adding task:', error.response?.data || error.message);\n// //     }\n// //   };\n\n// //   // Update an existing task's status\n// //   const updateTask = async (name) => {\n// //     try {\n// //       console.log('Updating Task:', name);\n// //       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n// //       setEditingTaskId(null);\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error updating task:', error);\n// //     }\n// //   };\n\n// //   // Delete a task\n// //   const deleteTask = async (name) => {\n// //     try {\n// //       console.log('Deleting Task:', name);\n// //       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //     }\n// //   };\n\n// //   // Handle form input changes\n// //   const handleInputChange = (e) => {\n// //     const { name, value, type, checked } = e.target;\n// //     setTaskForm({\n// //       ...taskForm,\n// //       [name]: type === 'checkbox' ? checked : value,\n// //     });\n// //   };\n\n// //   // Load tasks on component mount\n// //   useEffect(() => {\n// //     fetchTasks();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"dashboard-container\">\n// //       <h1>Task Management Dashboard</h1>\n\n// //       {/* Task Form */}\n// //       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"name\"\n// //           placeholder=\"Task Name\"\n// //           value={taskForm.name}\n// //           onChange={handleInputChange}\n// //           required\n// //         />\n// //         <input\n// //           type=\"date\"\n// //           name=\"deadline\"\n// //           value={taskForm.deadline}\n// //           onChange={handleInputChange}\n// //         />\n// //         <select\n// //           name=\"eventName\"\n// //           value={taskForm.eventName}\n// //           onChange={handleInputChange}\n// //           required\n// //         >\n// //           <option value=\"\" disabled>Select an event</option>\n// //           {events.map((event) => (\n// //             <option key={event._id} value={event.name}>\n// //               {event.name}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <button type=\"submit\">Add Task</button>\n// //       </form>\n\n// //       {/* Task Table */}\n// //       <div className=\"task-table\">\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Name</th>\n// //               <th>Deadline</th>\n// //               <th>Status</th>\n// //               <th>Event</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {tasks.map((task) => (\n// //               <tr key={task._id}>\n// //                 <td>{task.name}</td>\n// //                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n// //                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n// //                 <td>{task.event || 'Unlinked'}</td>\n// //                 <td>\n// //                   <button \n// //                     onClick={(e) => { \n// //                       e.preventDefault(); \n// //                       updateTask(task.name);\n// //                     }}\n// //                   >\n// //                     Update Status\n// //                   </button>\n// //                   <button onClick={() => deleteTask(task.name)}>Delete</button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../styles/taskDashboard.css';\nimport { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskTracker() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [taskForm, setTaskForm] = useState({\n    name: '',\n    deadline: '',\n    status: false,\n    eventName: ''\n  });\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [events, setEvents] = useState([]);\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getTasks');\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch events from the backend\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/api/getEvents');\n        setEvents(response.data); // Assume the API returns an array of events\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n    fetchEvents();\n  }, []);\n\n  // Add a new task\n  const addTask = async e => {\n    e.preventDefault();\n    try {\n      console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n      await axios.post('http://localhost:5001/api/postTask', taskForm);\n      setTaskForm({\n        name: '',\n        deadline: '',\n        status: false,\n        eventName: ''\n      }); // Reset the form\n      fetchTasks(); // Refresh the tasks list\n      console.log('Task added successfully!');\n    } catch (error) {\n      var _error$response;\n      console.error('Error adding task:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n\n  // Update an existing task's status\n  const updateTask = async name => {\n    try {\n      console.log('Updating Task:', name);\n      await axios.put('http://localhost:5001/api/changeTaskStatus', {\n        name\n      });\n      setEditingTaskId(null);\n      fetchTasks();\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async name => {\n    try {\n      console.log('Deleting Task:', name);\n      await axios.delete('http://localhost:5001/api/deleteTask', {\n        data: {\n          name\n        }\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  // Handle form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setTaskForm({\n      ...taskForm,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  // Calculate progress percentage\n  const calculateProgress = () => {\n    const totalTasks = tasks.length;\n    const completedTasks = tasks.filter(task => task.status).length;\n    return totalTasks > 0 ? completedTasks / totalTasks * 100 : 0;\n  };\n\n  // Load tasks on component mount\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"task-form\",\n      onSubmit: editingTaskId ? updateTask : addTask,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Task Name\",\n        value: taskForm.name,\n        onChange: handleInputChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"deadline\",\n        value: taskForm.deadline,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"eventName\",\n        value: taskForm.eventName,\n        onChange: handleInputChange,\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select an event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }, this), events.map(event => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: event.name,\n          children: event.name\n        }, event._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: [/*#__PURE__*/_jsxDEV(FaPlus, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this), \" Add Task\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${calculateProgress()}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-text\",\n      children: `${calculateProgress().toFixed(2)}% Completed`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-table\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Deadline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.status ? 'Completed' : 'Pending'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.event || 'Unlinked'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"update-button\",\n                onClick: e => {\n                  e.preventDefault();\n                  updateTask(task.name);\n                },\n                children: [/*#__PURE__*/_jsxDEV(FaCheck, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 21\n                }, this), \" Update Status\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: () => deleteTask(task.name),\n                children: [/*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 672,\n                  columnNumber: 21\n                }, this), \" Delete\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 17\n            }, this)]\n          }, task._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 596,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskTracker, \"vPO9lasuj7tjBo3exn2igleGtV8=\");\n_c = TaskTracker;\nvar _c;\n$RefreshReg$(_c, \"TaskTracker\");","map":{"version":3,"names":["React","useEffect","useState","axios","FaCheck","FaTrash","FaPlus","jsxDEV","_jsxDEV","TaskTracker","_s","tasks","setTasks","taskForm","setTaskForm","name","deadline","status","eventName","editingTaskId","setEditingTaskId","events","setEvents","fetchTasks","response","get","data","error","console","fetchEvents","addTask","e","preventDefault","log","post","_error$response","message","updateTask","put","deleteTask","delete","handleInputChange","value","type","checked","target","calculateProgress","totalTasks","length","completedTasks","filter","task","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onChange","required","disabled","map","event","_id","style","width","toFixed","Date","toLocaleDateString","onClick","_c","$RefreshReg$"],"sources":["/Users/charanpr/Downloads/EventManagementDashboard-main/frontend/src/Pages/TaskTracker.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n// // import '../styles/taskDashboard.css';\n\n// // export default function TaskTracker() {\n// //   const [tasks, setTasks] = useState([]);\n// //   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n// //   const [editingTaskId, setEditingTaskId] = useState(null);\n\n// //   const [events, setEvents] = useState([]);\n\n// //   // Fetch tasks from the backend\n// //   const fetchTasks = async () => {\n// //     try {\n// //       const response = await axios.get('http://localhost:5001/api/getTasks');\n// //       setTasks(response.data);\n// //     } catch (error) {\n// //       console.error('Error fetching tasks:', error);\n// //     }\n// //   };\n\n// //   // Fetch events from the backend\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/api/getEvents');\n// //         setEvents(response.data); // Assume the API returns an array of events\n// //       } catch (error) {\n// //         console.error('Error fetching events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   // Add a new task\n// //   const addTask = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n// //       await axios.post('http://localhost:5001/api/postTask', taskForm);\n// //       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n// //       fetchTasks(); // Refresh the tasks list\n// //       console.log('Task added successfully!');\n// //     } catch (error) {\n// //       console.error('Error adding task:', error.response?.data || error.message);\n// //     }\n// //   };\n\n// //   // Update an existing task's status\n// //   const updateTask = async (name) => {\n// //     try {\n// //       console.log('Updating Task:', name);\n// //       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n// //       setEditingTaskId(null);\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error updating task:', error);\n// //     }\n// //   };\n\n// //   // Delete a task\n// //   const deleteTask = async (name) => {\n// //     try {\n// //       console.log('Deleting Task:', name);\n// //       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n// //       fetchTasks();\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //     }\n// //   };\n\n// //   // Handle form input changes\n// //   const handleInputChange = (e) => {\n// //     const { name, value, type, checked } = e.target;\n// //     setTaskForm({\n// //       ...taskForm,\n// //       [name]: type === 'checkbox' ? checked : value,\n// //     });\n// //   };\n\n// //   // Load tasks on component mount\n// //   useEffect(() => {\n// //     fetchTasks();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"dashboard-container\">\n// //       <h1>Task Management Dashboard</h1>\n\n// //       {/* Task Form */}\n// //       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"name\"\n// //           placeholder=\"Task Name\"\n// //           value={taskForm.name}\n// //           onChange={handleInputChange}\n// //           required\n// //         />\n// //         <input\n// //           type=\"date\"\n// //           name=\"deadline\"\n// //           value={taskForm.deadline}\n// //           onChange={handleInputChange}\n// //         />\n// //         <select\n// //           name=\"eventName\"\n// //           value={taskForm.eventName}\n// //           onChange={handleInputChange}\n// //           required\n// //         >\n// //           <option value=\"\" disabled>Select an event</option>\n// //           {events.map((event) => (\n// //             <option key={event._id} value={event.name}>\n// //               {event.name}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <button type=\"submit\">Add Task</button>\n// //       </form>\n\n// //       {/* Task Table */}\n// //       <div className=\"task-table\">\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Name</th>\n// //               <th>Deadline</th>\n// //               <th>Status</th>\n// //               <th>Event</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {tasks.map((task) => (\n// //               <tr key={task._id}>\n// //                 <td>{task.name}</td>\n// //                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n// //                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n// //                 <td>{task.event || 'Unlinked'}</td>\n// //                 <td>\n// //                   <button \n// //                     onClick={(e) => { \n// //                       e.preventDefault(); \n// //                       updateTask(task.name);\n// //                     }}\n// //                   >\n// //                     Update Status\n// //                   </button>\n// //                   <button onClick={() => deleteTask(task.name)}>Delete</button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import '../styles/taskDashboard.css';\n// import { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\n// export default function TaskTracker() {\n//   const [tasks, setTasks] = useState([]);\n//   const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [events, setEvents] = useState([]);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/getTasks');\n//       setTasks(response.data);\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/api/getEvents');\n//         setEvents(response.data); // Assume the API returns an array of events\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n//       await axios.post('http://localhost:5001/api/postTask', taskForm);\n//       setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n//       fetchTasks(); // Refresh the tasks list\n//       console.log('Task added successfully!');\n//     } catch (error) {\n//       console.error('Error adding task:', error.response?.data || error.message);\n//     }\n//   };\n\n//   // Update an existing task's status\n//   const updateTask = async (name) => {\n//     try {\n//       console.log('Updating Task:', name);\n//       await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n//       setEditingTaskId(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (name) => {\n//     try {\n//       console.log('Deleting Task:', name);\n//       await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setTaskForm({\n//       ...taskForm,\n//       [name]: type === 'checkbox' ? checked : value,\n//     });\n//   };\n\n//   // Load tasks on component mount\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h1>Task Management Dashboard</h1>\n\n//       {/* Task Form */}\n//       <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Task Name\"\n//           value={taskForm.name}\n//           onChange={handleInputChange}\n//           required\n//         />\n//         <input\n//           type=\"date\"\n//           name=\"deadline\"\n//           value={taskForm.deadline}\n//           onChange={handleInputChange}\n//         />\n//         <select\n//           name=\"eventName\"\n//           value={taskForm.eventName}\n//           onChange={handleInputChange}\n//           required\n//         >\n//           <option value=\"\" disabled>Select an event</option>\n//           {events.map((event) => (\n//             <option key={event._id} value={event.name}>\n//               {event.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">\n//           <FaPlus /> Add Task\n//         </button>\n//       </form>\n\n//       {/* Task Table */}\n//       <div className=\"task-table\">\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Deadline</th>\n//               <th>Status</th>\n//               <th>Event</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task) => (\n//               <tr key={task._id}>\n//                 <td>{task.name}</td>\n//                 <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n//                 <td>{task.status ? 'Completed' : 'Pending'}</td>\n//                 <td>{task.event || 'Unlinked'}</td>\n//                 <td>\n//                   <button\n//                     className=\"update-button\"\n//                     onClick={(e) => {\n//                       e.preventDefault();\n//                       updateTask(task.name);\n//                     }}\n//                   >\n//                     <FaCheck /> Update Status\n//                   </button>\n//                   <button\n//                     className=\"delete-button\"\n//                     onClick={() => deleteTask(task.name)}\n//                   >\n//                     <FaTrash /> Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../styles/taskDashboard.css';\nimport { FaCheck, FaTrash, FaPlus } from 'react-icons/fa'; // Import icons\n\nexport default function TaskTracker() {\n  const [tasks, setTasks] = useState([]);\n  const [taskForm, setTaskForm] = useState({ name: '', deadline: '', status: false, eventName: '' });\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [events, setEvents] = useState([]);\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/getTasks');\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch events from the backend\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/api/getEvents');\n        setEvents(response.data); // Assume the API returns an array of events\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n\n    fetchEvents();\n  }, []);\n\n  // Add a new task\n  const addTask = async (e) => {\n    e.preventDefault();\n    try {\n      console.log('Task Form Data:', taskForm); // Log taskForm for debugging\n      await axios.post('http://localhost:5001/api/postTask', taskForm);\n      setTaskForm({ name: '', deadline: '', status: false, eventName: '' }); // Reset the form\n      fetchTasks(); // Refresh the tasks list\n      console.log('Task added successfully!');\n    } catch (error) {\n      console.error('Error adding task:', error.response?.data || error.message);\n    }\n  };\n\n  // Update an existing task's status\n  const updateTask = async (name) => {\n    try {\n      console.log('Updating Task:', name);\n      await axios.put('http://localhost:5001/api/changeTaskStatus', { name });\n      setEditingTaskId(null);\n      fetchTasks();\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async (name) => {\n    try {\n      console.log('Deleting Task:', name);\n      await axios.delete('http://localhost:5001/api/deleteTask', { data: { name } });\n      fetchTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  // Handle form input changes\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setTaskForm({\n      ...taskForm,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n\n  // Calculate progress percentage\n  const calculateProgress = () => {\n    const totalTasks = tasks.length;\n    const completedTasks = tasks.filter((task) => task.status).length;\n    return totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n  };\n\n  // Load tasks on component mount\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  return (\n    <div className=\"dashboard-container\">\n      <h1>Task Management Dashboard</h1>\n\n      {/* Task Form */}\n      <form className=\"task-form\" onSubmit={editingTaskId ? updateTask : addTask}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Task Name\"\n          value={taskForm.name}\n          onChange={handleInputChange}\n          required\n        />\n        <input\n          type=\"date\"\n          name=\"deadline\"\n          value={taskForm.deadline}\n          onChange={handleInputChange}\n        />\n        <select\n          name=\"eventName\"\n          value={taskForm.eventName}\n          onChange={handleInputChange}\n          required\n        >\n          <option value=\"\" disabled>Select an event</option>\n          {events.map((event) => (\n            <option key={event._id} value={event.name}>\n              {event.name}\n            </option>\n          ))}\n        </select>\n        <button type=\"submit\">\n          <FaPlus /> Add Task\n        </button>\n      </form>\n\n      {/* Progress Bar */}\n      <div className=\"progress-bar-container\">\n        <div className=\"progress-bar\" style={{ width: `${calculateProgress()}%` }}></div>\n      </div>\n      <div className=\"progress-text\">{`${calculateProgress().toFixed(2)}% Completed`}</div>\n\n      {/* Task Table */}\n      <div className=\"task-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Deadline</th>\n              <th>Status</th>\n              <th>Event</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tasks.map((task) => (\n              <tr key={task._id}>\n                <td>{task.name}</td>\n                <td>{task.deadline ? new Date(task.deadline).toLocaleDateString() : 'No deadline'}</td>\n                <td>{task.status ? 'Completed' : 'Pending'}</td>\n                <td>{task.event || 'Unlinked'}</td>\n                <td>\n                  <button\n                    className=\"update-button\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      updateTask(task.name);\n                    }}\n                  >\n                    <FaCheck /> Update Status\n                  </button>\n                  <button\n                    className=\"delete-button\"\n                    onClick={() => deleteTask(task.name)}\n                  >\n                    <FaTrash /> Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}